<?php
/**
 * @file
 * Custom user interface for the FLAT data repository
 */
require_once ('fedora_queries.php');

/**
 * Implements hook_help().
 */
function flat_deposit_ui_help($path, $arg){
    switch ($path){
        case 'admin/help#flat_deposit_ui':{
            $ret_val = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The FLAT deposit UI module is designed to manage the project data of each institutes employee') . '</p>';
            return $ret_val;
            break;
        }
    }

}

/**
 * Implements hook_permission().
 */
function flat_deposit_ui_permission()
{
    return array(
        'upload' => array(
            'title' => t('Upload'),
            'description' => t('Upload data to the FLAT deposit')),
        'view' => array(
            'title' => t('View'),
            'description' => t('View files uploaded to the FLAT deposit')),
        'manage' => array(
            'title' => t('Manage'),
            'description' => t('Manage files uploaded to the FLAT deposit')),
       'commit' => array(
            'title' => t('Commit'),
            'description' => t('Commit changes to FLAT deposit')),


    );
}



/**
 * Implements hook_form().
 */
function flat_deposit_ui_admin_form($node, &$form_state)
{
    $form = array();

    $form['overview'] = array(
        '#markup' => t('This interface allows users to admin their deposit preferences'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
    );

    $form['enable_delete'] = array (
        '#title' => t('View only'),
        '#description' => t('Prevent yourself to accidentally delete data'),
        '#type' => 'checkbox',
        '#default_value' => 1,
        '#required' => TRUE,
    );

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => 'save',
    );

    return $form;
}

/**
 * Implements hook_menu().
 */
function flat_deposit_ui_menu()
{
    $items = array();

    // Admin configuration group
    $items['admin/config/flat_deposit_ui'] = array(
        'title' => 'FLAT deposit UI',
        'description' => 'Administer FLAT deposit user interface',
        'access arguments' => array ('administer FLAT deposit UI'),
    );

    // Admin configuration - Upload settings
    $items['admin/config/flat_deposit_ui/manage'] = array(
        'title' => 'Customize settings',
        'description' => 'Administer FLAT deposit settings',
        'access arguments' => array ('administer FLAT deposit UI'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_admin_form'),
    );

    // Page for uploading data
    $items['workspace'] = array(
        'title' => 'Workspace',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_workspace_form'),
        'access callback' => TRUE,
    );
    // Page for ingested data
    $items['view'] = array(
        'title' => 'View archived data',
        'description' => 'Notification of data ingested to server',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_ingested_files',
        'access callback' => TRUE,
    );
    // Page for manage bundles
    $items['managebundles'] = array(
        'title' => 'Manage bundles',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_manage_bundles',
        'page arguments' => array(
            'content' => 'Under construction'),
        'access callback' => TRUE,
    );
    // Page for manage collections
    $items['managecollections'] = array(
        'title' => 'Manage Collections',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_collections',
        'access callback' => TRUE,
        'page arguments' => array(
            'content' => 'Under construction'),
    );
    // Page for commiting changes
    $items['commitchanges'] = array(
        'title' => 'Commit changes',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_commit_form'),
        'access callback' => TRUE,
    );

    return $items;
};


/**
 * Implements hook_block_info().
 */
function flat_deposit_ui_block_info()
{
    $blocks = array();

    $blocks['flat_deposit_menu'] = array(
        'info' => t('FLAT Deposit Main Menu'),
        'status' => TRUE,
        'region' => 'sidebar_second',
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => 'islandora/*',

    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flat_deposit_ui_block_view($delta = '')
{
    if ($delta == 'flat_deposit_menu') {
        return array(
            'subject' => t('FLAT Deposit Main Menu'),
            'content' => flat_deposit_ui_menu_block_generate(),
        );

    }
}

// Implements flat deposit main menu block
function flat_deposit_ui_menu_block_generate(){
    // Build a render array.
    global $user;

    $output = array(
        'link_workspace' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/workspace" title="My Workspace"><img title="My Workspace" alt="My Workspace" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Upload.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/workspace">My Workspace</a><br/></div>'),
        'link_view' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/view" title="View uploads"><img title="View uploads" alt="View uploads" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/View.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/view">View uploads</a><br/></div>'),
        'link_manage_bundles' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/managebundles/" title="Manage bundles"><img title="Manage bundles" alt="Manage bundles" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/managebundles">Manage bundles</a><br/></div>'),
        'link_manage_collections' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/managecollections" title="Manage collections"><img title="Manage collections" alt="Manage collections" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage_coll.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/managecollections">Manage collections</a><br/></div>'),
        'link_commit' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/commitchanges" title="Commit changes"><img title="Commit changes" alt="Commit changes" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Commit.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/commitchanges">Commit changes</a><br/></div>'),
    );

    return $output;
}


/**
 * @return string to be displayed on the page
 */
function flat_deposit_ui_workspace_form($form, &$form_state)
{
    // initiate user directories if necessary
    global $user;

    module_load_include('inc', 'imce', 'inc/imce.page');
    imce_initiate_profile ($user);

    module_load_include('inc', 'flat_deposit_ui', 'inc/owncloud_api');
    $oc = owncloud_account_exists($user);
    $my_code = 'window.open(\'imce\', \'windowName\', \'width=640, height=480\');';
    // Define the form array.

    $form ['init_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Create new project');
    $form['init_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Click to create new project'),
        '#submit' => array('flat_deposit_ui_workspace_project_init_submit'),
        '#validate' => array('flat_deposit_ui_workspace_project_init_validate'));

    $form['upload_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Upload data'),
        '#submit' => array('flat_deposit_ui_workspace_upload_submit'),
        );

    $v = variable_get('imce_roles_profiles',array());
    $w = variable_get('imce_profiles',array());
    if ($oc){
        return $form;
    }

}

function flat_deposit_ui_workspace_project_init_validate(&$form, &$form_state)
{
    global $user;
    $user_name = $user->name;
    $user_drupal_data_dir = 'public://users/' . $user_name;
    $user_backend_dir = '/app/flat/backend/' . $user_name;


    $project_name = $form_state['values']['init_name'];
    $message = FALSE;

    $form_state['user_name'] = $user_name;
    $form_state['user_drupal_data_dir'] = $user_drupal_data_dir;
    $form_state['project_name'] =  $project_name;
    $form_state['full_directory_path'] = $user_drupal_data_dir . '/' .  $project_name;

    //Check that the input values are of the proper format
    if (!preg_match('/^[a-zA-Z0-9\_]{2,20}+$/', $project_name)) {
        $message = 'Allowed are all letters, numbers and underscores (max length 20)';}
    //Check that project is not already existing
    elseif (file_exists($form_state['full_directory_path'])){
        $message = "Project already exists";}
    //Check that prject name is distinctive from existing projects
    else{
        $dirs = scandir($user_drupal_data_dir);
        foreach ($dirs as $dir){
            if (strtolower($dir)==strtolower($project_name)){$message = "Project with very similar project name exists";}
            };
        };
    //redirect to form in case error message is created
    if ($message) {form_set_error ('init_name', $message);}
}
/**
 * $workspace_project_init_form_submit
 * create new local folders on click; to get absolute path of local path type drupal_realpath("public://")
 */

function flat_deposit_ui_workspace_project_init_submit(&$form, &$form_state)
{
    drupal_set_message(t('Creating new project folders'));

    $target = $form_state['full_directory_path'];
    drupal_mkdir($target);
    drupal_chmod($target, 0775);
    drupal_mkdir($target . '/metadata');
    drupal_mkdir($target . '/data');


    //create symbolic link in owncloud user directory and refresh to see new directory
    module_load_include('inc', 'flat_deposit_ui', 'inc/owncloud_api');
    $ln = OC_ROOT . 'data/' . $form_state['user_name'] . '/files/' . $form_state['project_name'];

    symlink (drupal_realpath($target).'/data', $ln);
    $occ_command = 'php /var/www/owncloud/occ  files:scan --path="/'. $form_state['user_name'] . '/files"';
    shell_exec ( $occ_command );

}
#
/**
 * $manage_bundles_form_submit
 */

function flat_deposit_ui_workspace_upload_submit(&$form, &$form_state)
{
    drupal_set_message(t('Do your uploads'));

    $options=array();
    $options['absolute'] = TRUE;
    global $user;

    $form_state ['redirect'] = 'user/' . $user->uid  . '/imce';


}


/**
 * Gets a list of all data ingested since last login
 */
function flat_deposit_ui_view_ingested_files() {

    $tuque = islandora_get_tuque_connection();

    $query = create_query_all_owned_files($GLOBALS['user']->name);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();
    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $var = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($var);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);

#    export_array_to_db($rows);

    }
    // creating header array
    $header = array( t('File name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Notification'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}


/**
 * Gets a list of all data ingested since last login
 */
function flat_deposit_ui_view_collections()
{
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections($GLOBALS['user']->name);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $tmp = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($tmp);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('Name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Projects'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}

/**
 * Gets a list of all data ingested since last login
 */
function flat_deposit_ui_manage_bundles()
{
    global $user;
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections($user->name);

    $results = $tuque->repository->ri->sparqlQuery($query);

    // convert results to table format
    $header = array( t('PID'));
    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $row = array($pid) ;
        array_push($rows,$row);
    }

    #Test section
    $api_m = $tuque->repository->api->m;

    $query2 = query_owned_collections('');

    $results2 = $tuque->repository->ri->sparqlQuery($query2);

    // convert results to table format
    $rows2 = array();
    foreach ($results2 as $result2) {
        $pid = $result2['pid']['value'];
        $row = array($pid) ;
        array_push($rows2,$row);
    }


    $output = array(
        // Table, using the theme hook 'table'.
        'output sparql query' => array(
            '#theme' => 'table',
            '#caption' => t('Objects owned by ""'),
            '#header' => $header,
            '#rows' => $rows,
        ),
        // Table, using the theme hook 'table'.
        'output api_a' => array(
            '#theme' => 'table',
            '#caption' => t('Objects owned by ' . $user->name),
            '#header' => $header,
            '#rows' => $rows2,
        ),
    );
    return $output;
}

/**
 * function that presents all data found in the users directory and allows for data freeze and further ingest
 */
function flat_deposit_ui_commit_form($form, $form_state, $cleanup=false)
{
    global $user;
    $user_name = $user->name;
    $user_drupal_data_dir = 'public://users/' . $user_name;
    $user_backend_dir = '/app/flat/backend/' . $user_name;

    # get all project folders exclusive . and ..
    $project_folders = array_diff(scandir($user_drupal_data_dir), array('..', '.'));
    if (file_exists($user_backend_dir)){
        $project_folders = array_merge($project_folders, array_diff(scandir($user_backend_dir), array('..', '.')));
    }

    # Cleanup before
    if ($cleanup) {clear_db_user_projects($user_name);};

    #Update drupal database
    foreach ($project_folders as $project) {
        $is_frozen = file_exists($user_backend_dir . '/' . $project);


        if (!check_entry_exists($user_name, $project)) {
            insert_db_user_projects($user_name, $project, $is_frozen);
        } else {
            update_db_user_projects($user_name, $project, $is_frozen);
        }
    }

    #make array of open / frozen projects in order to use these in a form
    $open_projects = array();
    $frozen_projects = array();
    foreach (select_db_user_all_projects($user_name) as $project) {
        if ($project->is_frozen) {
            array_push($frozen_projects, $project->pname);
        } else {
            array_push($open_projects, $project->pname);
        }
    }

    #Delete when done
    #array_push($open_projects, 'open_checked', 'open_unchecked');
    #array_push($frozen_projects, 'frozen_checked', 'frozen_unchecked');

    #make form with three fields : 1) open projects, 2) frozen projects 3) additional (admin) tasks
    $form = array();

    # open #
    $form['field_1'] = array(
        '#type' => 'fieldset',
        '#title' => t('Open projects'),
    );

    # key and value of each checkbox will be the same
    $form['field_1']['freezable_projects'] = array(
        '#type' => 'checkboxes',
        '#options' => drupal_map_assoc($open_projects),
    );

    $form['field_1']['actions']['freeze'] = array(
        '#type' => 'submit',
        '#value' => t('Freeze project'),
        '#submit' => array('flat_deposit_ui_commit_form_freeze_submit'),
        '#validate' => array('flat_deposit_ui_commit_form_freeze_validate'),
    );

    # frozen #
    $form['field_2'] = array(
        '#type' => 'fieldset',
        '#title' => t('Projects ready to ingest'),
    );

    $form['field_2']['frozen_projects'] = array(
        '#type' => 'checkboxes',
        '#options' => drupal_map_assoc($frozen_projects),
    );

    // Allow actions for frozen data ready to ingest
    $form['field_2']['actions']['unfreeze'] = array(
        '#type' => 'submit',
        '#value' => t('Unfreeze project'),
        '#submit' => array('flat_deposit_ui_commit_form_unfreeze_submit'),
        '#validate' => array('flat_deposit_ui_commit_form_unfreeze_validate'),
    );
    $form['field_2']['actions']['ingest'] = array(
        '#type' => 'submit',
        '#value' => t('Upload project to database'),
        '#submit' => array('flat_deposit_ui_commit_form_unfreeze_submit'),
    );

    # Ingested #
    $form['field_3'] = array(
        '#type' => 'fieldset',
        '#title' => t('Project on database'),
    );

    # other #
    $form['other'] = array(
        '#type' => 'fieldset',
        '#title' => t('Other tasks'),
    );
    // Add extra buttons for other tasks
    $form['other']['buttons']['cleanup'] = array(
        '#type' => 'submit',
        '#value' => 'Refresh projects',
        '#submit' => array('flat_deposit_ui_commit_form_cleanup_DB_submit'),
    );
    return $form;
}

function flat_deposit_ui_commit_form_cleanup_DB_submit ($form, &$form_state)
{
    flat_deposit_ui_commit_form($form, $form_state, $cleanup=true);
}

function flat_deposit_ui_commit_form_freeze_validate (&$form, &$form_state)
{
    global $user;
    $user_name = $user->name;
    $message = FALSE;
    $backend = '/app/flat/backend';
    $user_drupal_data_dir = 'public://users/' . $user_name;
    $user_backend_dir = $backend . '/' . $user_name;

    // variables needed during submission
    $form_state['user_name'] = $user_name;
    $form_state['user_backend_dir'] = $user_backend_dir;
    $form_state['user_drupal_data_dir'] = $user_drupal_data_dir;

    // Check if backend directory exists
    if (!file_exists($backend)) {
        form_set_error ('freeze_error', "No freeze directory exists. Please contact administator");
        return $form;
    }

    // Check if backend is owned by www-data and writable
    $owner = posix_getpwuid(fileowner($backend));
    if ($owner['name'] != "www-data") {
        form_set_error ('freeze_error', "Freeze directory is not writable by application. Please contact administator");
        return $form;
    }

    // Check if user backend directory exists
    if (!file_exists($user_backend_dir)) {
        $created = drupal_mkdir($user_backend_dir, NULL, true);
        if (!$created) {
            form_set_error('freeze_error', "Could not create user backend directory. Please contact administator");
            return $form;
        }
    }

    // Check if project directory on backend already exists
    // for each checked box
    foreach ($form_state['values']['freezable_projects'] as $key => $value) {
        if ($value){
            $frozen_project_dir = $backend . '/' . $user_name . '/' . $value ;
            if (file_exists($frozen_project_dir)) {
                if (!$message) $message = "";
                $message .= 'A projects with the name ' . $value . ' has already been frozen.';}
        }
    }

    //redirect to form in case error message is created
    if ($message) {
        form_set_error ('freeze_error', $message);
    }

    return $form;
}



function flat_deposit_ui_commit_form_freeze_submit ($form, &$form_state)
{
    foreach ($form_state['values']['freezable_projects'] as $key => $value) {
        if ($value){
            $destination = $form_state['user_backend_dir'] . '/' . $value;
            $source = drupal_realpath($form_state['user_drupal_data_dir'] . '/' . $value);
            $moved = rename($source, $destination);
            if ($moved) {
                //remove symbolic link in owncloud user directory
                module_load_include('inc', 'flat_deposit_ui', 'inc/owncloud_api');
                $symlink = OC_ROOT . 'data/' . $form_state['user_name'] . '/files/' . $value;

                if(is_link($symlink)) {
                    unlink($symlink);
                } else {
                    exit("$symlink exists but not symbolic link\n");
                }

                //refresh owncloud to see only unfrozen projects
                $occ_command = 'php /var/www/owncloud/occ  files:scan --path="/'. $form_state['user_name'] . '/files"';
                shell_exec ( $occ_command );

                drupal_set_message(t('Project ' . $value . ' is frozen'));
            }
        }
    }
}

function flat_deposit_ui_commit_form_unfreeze_validate (&$form, &$form_state)
{
    global $user;
    $user_name = $user->name;
    $message = FALSE;
    $backend = '/app/flat/backend';
    $user_drupal_data_dir = 'public://users/' . $user_name;
    $user_backend_dir = $backend . '/' . $user_name;

    // variables needed during submission
    $form_state['user_name'] = $user_name;
    $form_state['user_backend_dir'] = $user_backend_dir;
    $form_state['user_drupal_data_dir'] = $user_drupal_data_dir;

    // Check if user drupal data directory exists
    if (!file_exists($user_drupal_data_dir)) {
        form_set_error ('unfreeze_error', "User Drupal data directory does not exist. Please contact administator");
        return $form;
    }

    // Check if backend is owned by www-data and writable
    $owner = posix_getpwuid(fileowner($user_drupal_data_dir));
    if ($owner['name'] != "www-data") {
        form_set_error ('unfreeze_error', "User Drupal data directory is not writable by application. Please contact administator");
        return $form;
    }

    // Check if drupal datam project directory already exists
    // for each checked box
    foreach ($form_state['values']['frozen_projects'] as $key => $value) {
        if ($value){
            $open_project_dir = $user_drupal_data_dir . '/' . $value ;
            if (file_exists($open_project_dir)) {
                if (!$message) $message = "";
                $message .= 'A projects with the name ' . $value . ' has already been frozen.';}
        }
    }

    //redirect to form in case error message is created
    if ($message) {
        form_set_error ('unfreeze_error', $message);
    }

    return $form;
}


function flat_deposit_ui_commit_form_unfreeze_submit ($form, &$form_state)
{
    foreach ($form_state['values']['frozen_projects'] as $key => $value) {
        if ($value){
            $source = $form_state['user_backend_dir'] . '/' . $value;
            $destination = drupal_realpath($form_state['user_drupal_data_dir'] . '/' . $value);
            $moved = rename($source, $destination);


            if ($moved) {
                //add symbolic link to owncloud user directory
                module_load_include('inc', 'flat_deposit_ui', 'inc/owncloud_api');
                $symlink = OC_ROOT . 'data/' . $form_state['user_name'] . '/files/' . $value;

                symlink (drupal_realpath($form_state['user_drupal_data_dir']) . '/' . $value . '/data', $symlink);

                //refresh owncloud to see only unfrozen projects
                $occ_command = 'php /var/www/owncloud/occ  files:scan --path="/'. $form_state['user_name'] . '/files"';
                shell_exec ( $occ_command );

                drupal_set_message(t('Project ' . $value . ' is open and can be changed'));
            }
        }
    }
}

function clear_db_user_projects($user){
   $results = db_delete('flat_deposit_ui_project_info')
        ->condition('user_id', $user)
        ->execute();
    return $results;
}


function refresh_db_user_projects($user){
    $results = db_select('flat_deposit_ui_project_info')
        ->fields('pname')
        ->condition('user_id', $user)
        ->execute();
    return $results;
}

function insert_db_user_projects($user, $project, $is_frozen){
    if (!$is_frozen) {$is_frozen = '0';};
    $res = db_insert('flat_deposit_ui_project_info')
    ->fields(array(
        'user_id' => $user,
        'pname' => $project,
        'is_frozen' => $is_frozen,
        'ingested' => REQUEST_TIME,
    ))
        ->execute();
    return $res;
}

function select_db_user_all_projects($user)
{
    $entries = array();

    $results = db_select('flat_deposit_ui_project_info', 'p')
        ->fields('p', array('pname', 'is_frozen'))
        ->condition('user_id', $user)
        ->execute();
    foreach ($results as $row) {
        $entries[] = $row;
    }
    return $entries;
}

function check_entry_exists($user, $project){
    $bool = FALSE;
    $entries = array();


    $results = db_select('flat_deposit_ui_project_info','p')
        ->fields('p',array('pname'))
        ->condition('user_id', $user)
        ->condition('pname', $project)
        ->execute();
    foreach ($results as $row){
        array_push($entries, $row);
    }
    if (count($entries) >0){$bool=TRUE;}
    return $bool;
}

function update_db_user_projects($user, $project, $is_frozen)
{
    if (!$is_frozen) {$is_frozen = '0';};
    db_update('flat_deposit_ui_project_info')
        ->fields(array(
            'is_frozen' => $is_frozen))
        ->condition('user_id', $user)
        ->condition('pname', $project)
        ->execute();
}