<?php
/**
 * @file
 * Deposit UI installation
 */

/**
 * Implements hook_install().
 */
function flat_deposit_install()
{
    $t = get_t();

    // CREATE FLAT BUNDLE and FLAT COLLECTION CONTENT TYPE
    // This content types are the core entities that will contain upload data and metadata and upload information
    $content_types = array(
        'flat_bundle' => array(
            'type' => 'flat_bundle',
            'name' => $t('FLAT Upload bundle'),
            'description' => $t('A bundle of one or more data files upload entity'),
            'title_label' => $t('Name of the upload bundle'),
            'base' => 'flat_bundle', #declare to be able to use content type hooks
            'custom' => TRUE
        ),
        'flat_collection' => array(
            'type' => 'flat_collection',
            'name' => $t('FLAT collection'),
            'description' => $t('A collection of data bundles'),
            'title_label' => $t('Name of the collection'),
            'base' => 'flat_collection', #declare to be able to use content type hooks
            'custom' => TRUE
        ),
    );

    foreach ($content_types as $key => $content_type){
        // Set remaining definitions with defaults
        $node_type = node_type_set_defaults($content_type);
        node_type_save($node_type);


        // switch off comments for content type _flat_bundle
        variable_set('comment_' . $key, '0');
        $node_options = variable_get('node_options_' . $key, array());

        // switch off promotion of new entries to front
        $promote_key = array_search('promote', $node_options);
        if ($promote_key !== false) {
            unset($node_options[$promote_key]);
            variable_set('node_options_'. $key, $node_options);
        }
    }




    // Attach fields to the flat bundle content type by creating fields and instances of these fields
    $fields = array();

    $fields['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(),
            'locked' => TRUE,
    );

    $fields['upload_cmdi'] = array(
        'field_name' => 'upload_cmdi',
        'settings' => array(
            'display_field' => 1,
            'display_default' => 1,
            'uri_scheme' => 'private',
        ),
        'type' => 'file',
        'entity_types' => array('node'),
        'cardinality' => 1,
    );


    $fields['upload_cmdi_creator'] = array(
        'field_name' => 'upload_cmdi_creator',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values'=> array(
                0 => "no",
                1 => "yes"),
        ),
    );


    $fields['upload_status'] = array(
        'field_name' => 'upload_status',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values' => array(
                'open' => 'open',
                'failed' => 'failed',
                'validating' => 'validating',
                'valid' => 'valid',
                'processing' => 'processing',
                'archived' => 'archived',
            )
        ),
        'locked' => TRUE
    );

    $fields['upload_external'] = array(
        'field_name' => 'upload_external',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values'=> array(
                0 => "no",
                1 => "yes"),
        ),
    );

    $fields['upload_location'] = array(
        'field_name' => 'upload_location',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 255)
    );

    $fields['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 5000)
    );

    foreach ($fields as $field) {
        field_create_field($field);}

    $instances = array();

    $instances['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'label' => $t('Name of the collection'
        ),
        'description' => $t('The collection to which the upload bundle belongs'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),
        ),
    );


    $instances['upload_cmdi'] = array(

        'field_name' => 'upload_cmdi',
        'entity_type' => 'node',
        'bundle' => 'flat_bundle',
        'label' => 'Attached metadata file',
        'description' => $t('The metadata file describing the upload bundle'),
        'widget' => array(
            'type' => 'file_generic',
            'settings' => array (
                'progress_indicator' => 'throbber',
                'imce_filefield_on' => 0,
                )
        ),
        'settings' => array(
            'file_directory' => '',
            'file_extensions' => 'cmdi',
            'max_filesize' => '1 MB',
            'description_field' => 0,
            'filefield_paths_enabled' => 1,
            'filefield_paths' =>
                array (
                    'file_path' => array (
                        'value' =>  'flat_deposit/metadata/[current-user:name]/[node:upload_collection]/[node:title]/',
                        'options' => array(
                            'slashes' => 0,
                            'pathauto' => FALSE,
                            'transliterate' => 0,
                        ),
                        'redirect' => false,
                        'retroactive_update' => 0,
                        'active_updating' => 0,
                        ),
                    'file_name' =>array (
                        'value' =>  'record.cmdi',
                        'options' => array(
                            'slashes' => 0,
                            'pathauto' => FALSE,
                            'transliterate' => 0,
                            ),
                        ),
                    ),
            ),
        'required' => FALSE,
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),
        ),
    );

    $instances['upload_cmdi_creator'] = array(
        'field_name' => 'upload_cmdi_creator',
        'label' => $t('CMDI created within FLAT'),
        'description' => $t('CMDI will be created using the Flat deposit cmdi creator'),
        'widget' => array(
            'type' => 'option_buttons',
        ),
        'default_value' => array(0 => array('value'=> '0')),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),
        )
    );

    $instances['upload_status'] = array(
        'field_name' => 'upload_status',
        'label' => $t('Status of the upload'),
        'description' => $t('Is the bundle accessible (open or failed), being processed (validating or processing) or closed (valid or archived)'),
        'widget' => array(
            'type' => 'option_buttons',
        ),

        'required' => TRUE,
        'default_value' => array(
            0 => array('value'=> 'open')),
        'settings' => array('text_processing' => 0),
        'no_ui' => TRUE,
        'display' => array(
            'default' => array(
                'label' => 'inline',
            )
        )
    );

    $instances['upload_external'] = array(
        'field_name' => 'upload_external',
        'label' => $t('Data has alternate storage location'
        ),
        'description' => $t('Check this option if data is available at a different location'),
        'widget' => array(
            'type' => 'option_buttons',
        ),
        'default_value' => array(
            0 => array('value'=> '0')),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),
        )
    );

    $instances['upload_location'] = array(
        'field_name' => 'upload_location',
        'label' => $t('Location where data is stored'
        ),
        'description' => $t('Folder where data to be archived is stored'),
        'widget' => array(
            'type' => 'text'
        ),
        'required' => FALSE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),

        )
    );

    $instances['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'label' => $t('Exception'
        ),
        'description' => $t('Did any errors occur during upload'),
        'widget' => array(
            'type' => 'text_textfield'
        ),
        'required' => FALSE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'type' => 'hidden',
                'label' => 'inline',
            ),
            'error' => array(
                'label' => 'inline',
            ),
        )
    );

    foreach ($instances as $instance){
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'flat_bundle';
        field_create_instance($instance);
    }

    //SET DEFAULTS
    module_load_include('inc', 'flat_deposit', 'inc/config');

    flat_deposit_set_paths();
    flat_deposit_set_names();
    flat_deposit_set_metadata();
    flat_deposit_set_ingest_service();
    flat_deposit_set_sword();
    flat_deposit_set_doorkeeper();
    flat_deposit_set_fedora();
    flat_deposit_set_solr();


    variable_set('file_private_path','sites/default/files/private');


    variable_set('file_default_scheme','private');
    variable_set('imce_settings_disable_private',0);


    flat_deposit_set_custom_roles();

    // Install our custom block visibility settings per node type
    $query = db_insert('block_node_type')
        ->fields(array('type', 'module', 'delta'))
        ->values(array(
            'module' => 'flat_deposit',
            'delta' => 'node_actions', // block name
            'type' => 'flat_bundle', // content type
        ))
        ->execute();

}



/**
 * Implements hook_schema().
 */
function flat_deposit_schema() {

    // Table keeping track of existing collections
    $schema['flat_supercollection'] = array(
        'description' => 'Collection-member relation in FLAT.',
        'fields' => array(
            'collection_id'  => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => 'Unique ID of each member collection relation'
            ),
            'collection_name'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'Name of the collection'
            ),
            'collection_tree'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'Complete path of collection (from root collection to final subdirectory)'
            ),
            'collection_pid'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'PID assigned by fedora to collection'
            ),
            'member' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => FALSE,
                'description' => 'Member of the collection.'
            ),
            'label'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'label of the relation'
            ),
            'language' => array(
                'description' => 'language of the displayed entity',
                'length' => 12,
                'type' => 'varchar',
                'not null' => TRUE,
                'default' => ''
            ),
            'date_created' => array(
                'description' => 'Date when entry was created',
                'type' => 'int',
                'not null' => TRUE,
            ),
        ),

        'primary key' => array('collection_id'),
        'indexes' => array(
            'language' => array('language'),)
    );


    return $schema;
}


/**
 * Implements hook_uninstall().
 */
function flat_deposit_uninstall(){
    $t = get_t();

    // DISABLE AND UNINSTALL DEPENDENT PACKAGES
    module_disable(array('blog','flat_views', 'flat_owncloud'));
    drupal_uninstall_modules(array('blog', 'flat_owncloud'));

    // Delete all user data from drupal user data folder and freeze folder
    module_load_include('php', 'flat_deposit', 'inc/php_functions');

    $users = entity_load('user');

    foreach ($users as $user){

        if(strlen($user->name) > 0){

            $user_data_directory =  drupal_realpath('private://flat_deposit/' . $user->name);
            $user_freeze_directory =  variable_get('flat_deposit_paths',array())['freeze'] . "/$user->name";

            if (file_exists($user_data_directory) && $user_data_directory){

                recursiveRmDir($user_data_directory);
                rmdir ($user_data_directory);}

            if (file_exists($user_freeze_directory) && $user_freeze_directory){

                recursiveRmDir($user_freeze_directory);
                rmdir ($user_freeze_directory);}
        }
    }

    drupal_set_message($t('All non-archived user project data files in drupal data folder and freeze folder have been removed'));

    // clean up variables
    variable_del('flat_deposit_paths');
    variable_del('flat_deposit_names');
    variable_del('flat_deposit_metadata');
    variable_del('flat_deposit_ingest_service');
    variable_del('flat_deposit_sword');
    variable_del('flat_deposit_doorkeeper');
    variable_del('flat_deposit_fedora');
    variable_del('flat_deposit_solr');


    // Delete all flat_bundle and flat_collection content
    $nids = db_select('node','n')
        ->fields('n', array('nid'))
        ->condition('type', array('flat_collection', 'flat_member', 'flat_bundle', 'blog'), 'IN')
        ->execute()
        ->fetchCol();

    if (!empty ($nids)){
        node_delete_multiple($nids);
        drupal_set_message($t('Nodes containing custom content types have been removed'));
    }

    
    //Remove all custom content type fields and field instances and clean up entries in field_config / field_config_instance tables
    field_attach_delete_bundle('node','flat_bundle');
    field_attach_delete_bundle('node','flat_collection');

    db_delete('field_config_instance')
        ->condition('deleted', 1)
        ->execute();

    field_purge_batch(1000);

    drupal_set_message($t('Custom field and field instances have been removed'));

    // Delete custom content type
    node_type_delete('flat_bundle');
    node_type_delete('flat_collection');
    drupal_set_message($t('Custom content type has been removed'));


    //Round up uninstall
    drupal_set_message($t('Flat deposit has been uninstalled'));


}
