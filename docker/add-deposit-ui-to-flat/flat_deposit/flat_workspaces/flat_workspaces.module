<?php
/**
 * Created by PhpStorm.
 * User: danrhe
 * Date: 07/11/16
 * Time: 16:22
 */



/**
 * Implements hook_stream_wrappers().
 */
function flat_workspaces_stream_wrappers() {
    return array(
        'local' => array(
            'name' => t('The Local Data Stream'),
            'class' => 'LocalStreamWrapper',
            'description' => t('Stream wrapper for locally stored data'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),

    );
}

class LocalStreamWrapper extends DrupalPrivateStreamWrapper {
    public function getDirectoryPath() {

        return variable_get('flat_workspaces')['mount_folder'];
    }

    /**
     * Overrides getExternalUrl().
     *
     * Return the HTML URI of a private file.
     */
    function getExternalUrl() {
        $path = str_replace('\\', '/', $this->getTarget());
        return url('system/files/' . $path, array('absolute' => TRUE));
    }

    /**
     * Overrides StreamWrapperInterface::rename
     */
    public function rename($from_uri, $to_uri) {
        return rename($this->getLocalPath($from_uri), $this->getLocalPath($to_uri));
    }

    /**
     * Overrides StreamWrapperInterface::getLocalPath
     */
    protected function getLocalPath($uri = NULL) {
        if (!isset($uri)) {
            $uri = $this->uri;
        }
        $path = $this->getDirectoryPath() . '/' . $this->getTarget($uri);
        $realpath = realpath($path);
        if (!$realpath) {
            // This file does not yet exist.
            $realpath = realpath(dirname($path)) . '/' . drupal_basename($path);
        }
        $directory = realpath($this->getDirectoryPath());
        if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
            return FALSE;
        }
        return $realpath;
    }

}
/**
 * Implements hook_menu().
 */
function flat_workspaces_menu()
{

    $items = array();

    // Admin configuration - Owncloud settings
    $items['admin/config/flat_deposit/workspaces'] = array(
        'title' => 'Administer workspaces',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_workspaces_admin_form'),
        'file' => 'inc/flat_workspaces.admin_form.inc',
        'access arguments' => array('admin deposit module'));

    return $items;
}

function flat_workspaces_form_flat_bundle_node_form_alter(&$form, &$form_state, $form_id){



    ///////////
    // Add local project directory selection form container element
    // #state attribute makes it only visible if flat_source field is set to 'local'
    ///////////
    form_load_include($form_state, 'inc','flat_workspaces','inc/class.Workspaces');
    module_load_include('inc', 'node', 'node.pages');
    $form['workspace_navigation'] = Workspaces::get_container();
    form_load_include($form_state, 'inc', 'node', 'node.pages');

    if (isset($form['#node'])){
        $node = $form['#node'];
        $wrapper = entity_metadata_wrapper('node', $node);
    };



    // add original path to values if node is edited and thus original path is already set.
    $flat_original_path = $wrapper->flat_original_path->value();

    if (empty($form_state['values']['department']) AND $flat_original_path){

        $form_state['values']['flat_original_path']['und'][0]['value'] = $flat_original_path;
    }




    // set the local departments' workspaces folder
    if (!empty($form_state['values']['department'])){

        $department =   $form_state['values']['department'] ;
    // keep info if location for data has been chosen and is unchanged
    } elseif (empty($form_state['values']['department']) AND $flat_original_path){


        $path = str_replace('local://', '', $flat_original_path);
        $department = explode('/', $path)[0];
        $form['workspace_navigation']['field']['department']['#default_value'] = $department;

    } else {
        $department = 'none';
    }

    $config_names = variable_get('flat_workspaces');
    $workspaces_directory = 'local://' . $department . '/' . $config_names['workspace_folder'];
    //drupal_set_message('workspaces dir: ' . $workspaces_directory, 'error');


    //Scan workspace directory; non-existing directories will return false, existing dirs will populate the
    // workspace field options

    //
    $workspaces = Workspaces::listAccessibleFolderContent($workspaces_directory, ['isDir', 'userHasReadPermissions', 'webUserHasReadPermissions', 'isNotCurrentDir']);
    //drupal_set_message('workspaces: ' . (string)$workspaces[2], 'error');
    if (!empty($workspaces)){
        $form['workspace_navigation']['field']['workspace']['#options'] = array_combine($workspaces, $workspaces);
        $form['workspace_navigation']['field']['workspace']['#access'] = TRUE;

    } else{
        $form['workspace_navigation']['field']['workspace']['#access'] = TRUE;
        $form['workspace_navigation']['field']['workspace']['#disabled'] = TRUE;
    }


    if (!empty($form_state['values']['workspace'])){
        $workspace =   $form_state['values']['workspace'] ;

        // keep info if location for data has been chosen and is unchanged
    } elseif (empty($form_state['values']['workspace']) AND $flat_original_path){

        $path = str_replace('local://', '', $flat_original_path);
        $elements = explode('/', $path);
        $key = array_search('workspaces', $elements);
        $workspace = $elements[$key +   1];
        $form['workspace_navigation']['field']['workspace']['#default_value'] = $workspace;

    } else {
        $workspace = 'none';
    }

    $workspace_root = $workspaces_directory . '/' . $workspace . '/' . $config_names['archive_folder'];


    // Get original directory value.
    $current =  Workspaces::get_flat_original_path($form_state, $workspace_root);

    // (if chosen) extend 'current' directory value with value of next_directories
    if (!empty($form_state['values']['next_directories'])) {

        if ($form_state['values']['next_directories'] == '..'){

            $current = dirname($current);

        } else {

            $current .= "/" . $form_state['values']['next_directories'];
        }

        unset($form_state['values']['next_directories']);
        $form['workspace_navigation']['field']['next_directories']['#options'] = array();
        $form['workspace_navigation']['field']['next_directories']['#access'] = FALSE;

        $form['workspace_navigation']['field']['next_directories']['#default_value'] = '';
        $form_state['input']['next_directories'] ='';

    }

    // alter default value of the flat_original_path field to attach value of current directory to flat_bundle node
    $form['flat_original_path']['und'][0]['value']['#default_value'] = $current;

    // print result to screen
    $form['workspace_navigation']['field']['current_directory']['#markup'] = '</br>Currently selected folder: <strong><br>' .
        str_replace('local://' ,'[Workspaces]/', $current. '</strong>');
    // Add dropdown menu with lower level directories to go into
    $subDirs = Workspaces::listAccessibleFolderContent($current, ['hasValidDirectoryName', 'isDir', 'userHasWritePermissions', 'webUserHasWritePermissions', 'isNotCurrentDir']);
    if (!empty($subDirs)){
        $form['workspace_navigation']['field']['next_directories']['#options'] = array_combine($subDirs, $subDirs);
        $form['workspace_navigation']['field']['next_directories']['#access'] = TRUE;
        if (count($subDirs) == 1){

            if($flat_original_path != $current){

                // Validate that no other bundle is using same folder
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'flat_bundle')
                    ->fieldCondition('flat_original_path', 'value', $current, '=')
                ;

                $results = $query->execute();
                if (empty(!$results)){

                    form_set_error('flat_original_path', 'Specified folder is already in use for a different bundle');
                };

            }

            //$form['workspace_navigation']['field']['next_directories']['#empty_option'] = basename($current);
            $form['workspace_navigation']['field']['next_directories']['#title'] = 'Subfolder';
        }

    }


}


function flat_workspaces_form_flat_bundle_node_form_validate($form, &$form_state)
{

    form_set_error('debug', 'debug');
}

function flat_workspaces_node_view($node, $view_mode, $langcode)
{

    if ($node->type == 'flat_bundle' AND $view_mode == 'full' AND node_is_page($node)) {

        $wrapper = entity_metadata_wrapper('node', $node);

        if ($wrapper->flat_source->value() == 'local') {
            $path = $node->content['flat_original_path'][0]['#markup'];
            $path = str_replace('local://', '', $path);
            $path = str_replace('external://', '', $path);
            $path = str_replace('freeze://', '[protected folder on server]', $path);
            $node->content['flat_original_path'][0]['#markup'] = $path;
        }

    }
}
