<?php

/**
 * Implements hook_stream_wrappers().
 */
function flat_deposit_stream_wrappers() {
    return array(
        'freeze' => array(
            'name' => t('The Data Freeze Stream'),
            //a class that implement the stream
            'class' => 'FreezeStreamWrapper',
            'description' => t('Stream wrapper for frozen files'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),

        'metadata' => array(
            'name' => t('The Metadata Stream'),
            'class' => 'MetadataStreamWrapper',
            'description' => t('Stream wrapper for storing metadata'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),

        'local' => array(
            'name' => t('The Local Data Stream'),
            'class' => 'LocalStreamWrapper',
            'description' => t('Stream wrapper for locally stored data'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),

        'external' => array(
            'name' => t('The External Data Stream'),
            'class' => 'ExternalStreamWrapper',
            'description' => t('Stream wrapper for storing externally uploaded data'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),


    );
}




class FreezeStreamWrapper extends DrupalPrivateStreamWrapper {
    public function getDirectoryPath() {

        return variable_get('flat_deposit_paths')['freeze'];
    }

    /**
     * Overrides getExternalUrl().
     *
     * Return the HTML URI of a private file.
     */
    function getExternalUrl() {
        $path = str_replace('\\', '/', $this->getTarget());

        return url('system/files/' . $path, array('absolute' => TRUE));
    }

    /**
     * Overrides StreamWrapperInterface::rename
     */
    public function rename($from_uri, $to_uri) {
        return rename($this->getLocalPath($from_uri), $this->getLocalPath($to_uri));
    }

    /**
     * Overrides StreamWrapperInterface::getLocalPath
     */
    protected function getLocalPath($uri = NULL) {
        if (!isset($uri)) {
            $uri = $this->uri;
        }
        $path = $this->getDirectoryPath() . '/' . $this->getTarget($uri);
        $realpath = realpath($path);
        if (!$realpath) {
            // This file does not yet exist.
            $realpath = realpath(dirname($path)) . '/' . drupal_basename($path);
        }
        $directory = realpath($this->getDirectoryPath());
        if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
            return FALSE;
        }
        return $realpath;
    }

}







class MetadataStreamWrapper extends DrupalPrivateStreamWrapper {
    public function getDirectoryPath() {

        return variable_get('flat_deposit_paths')['metadata'];
    }

    /**
     * Overrides getExternalUrl().
     *
     * Return the HTML URI of a private file.
     */
    function getExternalUrl() {
        $path = str_replace('\\', '/', $this->getTarget());
        return url('system/files/flat_deposit/metadata/' . $path, array('absolute' => TRUE));
    }

    /**
     * Overrides StreamWrapperInterface::rename
     */
    public function rename($from_uri, $to_uri) {
        return rename($this->getLocalPath($from_uri), $this->getLocalPath($to_uri));
    }

    /**
     * Overrides StreamWrapperInterface::getLocalPath
     */
    protected function getLocalPath($uri = NULL) {
        if (!isset($uri)) {
            $uri = $this->uri;
        }
        $path = $this->getDirectoryPath() . '/' . $this->getTarget($uri);
        $realpath = realpath($path);
        if (!$realpath) {
            // This file does not yet exist.
            $realpath = realpath(dirname($path)) . '/' . drupal_basename($path);
        }
        $directory = realpath($this->getDirectoryPath());
        if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
            return FALSE;
        }
        return $realpath;
    }

}



class LocalStreamWrapper extends DrupalPrivateStreamWrapper {
    public function getDirectoryPath() {

        return variable_get('flat_deposit_paths')['local'];
    }

    /**
     * Overrides getExternalUrl().
     *
     * Return the HTML URI of a private file.
     */
    function getExternalUrl() {
        $path = str_replace('\\', '/', $this->getTarget());
        return url('system/files/' . $path, array('absolute' => TRUE));
    }

    /**
     * Overrides StreamWrapperInterface::rename
     */
    public function rename($from_uri, $to_uri) {
        return rename($this->getLocalPath($from_uri), $this->getLocalPath($to_uri));
    }

    /**
     * Overrides StreamWrapperInterface::getLocalPath
     */
    protected function getLocalPath($uri = NULL) {
        if (!isset($uri)) {
            $uri = $this->uri;
        }
        $path = $this->getDirectoryPath() . '/' . $this->getTarget($uri);
        $realpath = realpath($path);
        if (!$realpath) {
            // This file does not yet exist.
            $realpath = realpath(dirname($path)) . '/' . drupal_basename($path);
        }
        $directory = realpath($this->getDirectoryPath());
        if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
            return FALSE;
        }
        return $realpath;
    }

}

class ExternalStreamWrapper extends DrupalPrivateStreamWrapper {
    public function getDirectoryPath() {

        return variable_get('flat_deposit_paths')['external'];
    }

    /**
     * Overrides getExternalUrl().
     *
     * Return the HTML URI of a private file.
     */
    function getExternalUrl() {
        $path = str_replace('\\', '/', $this->getTarget());
        return url('system/files/flat_deposit/data' . $path, array('absolute' => TRUE));
    }

    /**
     * Overrides StreamWrapperInterface::rename
     */
    public function rename($from_uri, $to_uri) {
        return rename($this->getLocalPath($from_uri), $this->getLocalPath($to_uri));
    }

    /**
     * Overrides StreamWrapperInterface::getLocalPath
     */
    protected function getLocalPath($uri = NULL) {
        if (!isset($uri)) {
            $uri = $this->uri;
        }
        $path = $this->getDirectoryPath() . '/' . $this->getTarget($uri);
        $realpath = realpath($path);
        if (!$realpath) {
            // This file does not yet exist.
            $realpath = realpath(dirname($path)) . '/' . drupal_basename($path);
        }
        $directory = realpath($this->getDirectoryPath());
        if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
            return FALSE;
        }
        return $realpath;
    }

}



/**
 * Implements hook_permission().
 */
function flat_deposit_permission()
{
    // setting up the right to use the deposit and to administer
    return array(
        'admin deposit module' => array(
            'title' => t('Administration of the deposit module'),
            'description' => t('All administrative tasks'),
            'restrict access' => TRUE),
        'use deposit module' => array(
            'title' => t('Usage of the deposit module'),
            'description' => t('Make use of the FLAT deposit')),
        'validate bundles' => array(
            'title' => t('Validate bundles'),
            'description' => t('Allow to validate new bundles')),
        'ingest bundles' => array(
            'title' => t('Ingest bundles'),
            'description' => t('Allow to do ingest after validation')),
        'view collection' => array(
            'title' => t('View collections'),
            'description' => t('See overview collections')),
        'admin collection' => array(
            'title' => t('Admin collections'),
            'description' => t('Admin flat_supercollections')),
    );
}

/**
 * Implements hook_enable().
 *
 * setup of initial configuration that is not already configured during install
 */
function flat_deposit_enable(){

    // Set correct permissions
    module_load_include('inc', 'flat_deposit', 'inc/config');
    flat_deposit_set_custom_roles();
    flat_deposit_set_anonymous_user_permissions();
    flat_deposit_set_authenticated_user_permissions();
    flat_deposit_set_content_access();

    // enable blog functionality in order to allow the backend to create ingest reports
    module_enable(array('blog','flat_views'));

    $paths = variable_get('flat_deposit_paths');
    $filter = array('local', 'external', 'metadata', 'freeze');

    $directories = array_intersect_key($paths, array_flip($filter));

    foreach ($directories as $directory)
    {

        if (!file_exists($directory)){

            drupal_mkdir($directory, NULL, TRUE);

            if (!file_exists($directory)){

                drupal_set_message(t('Private directory for storing bundles (!directory) does not exist and cannot be created. 
                Please change the variable file_private_path by visiting admin/config/media/file-system or create the directory manually. 
                Make sure also to adapt profile User-1 in admin/config/media/imce/profile',
                    array('!directory'=> $directory)),'warning');

            } elseif (posix_getpwuid(fileowner($directory)) !== variable_get('flat_deposit_names')['apache_user']){

                drupal_set_message(t('Private directory (!directory) is not owned by apache user. Please change manually ownership of the directory. 
                Make sure also to adapt profile User-1 in admin/config/media/imce/profile',
                    array('!directory'=> $directory)),'warning');

            }

        }

    }

}

/**
 * Implements hook_menu().
 */
function flat_deposit_menu()
{

    // Admin configuration group
    $items['admin/config/flat_deposit'] = array(
        'title' => 'FLAT deposit user interface',
        'description' => 'Administer FLAT deposit user interface',
        'access arguments' => array('admin deposit module'));

    // Admin configuration - Upload settings
    $items['admin/config/flat_deposit/customize'] = array(
        'title' => 'Configure deposit settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_admin_form'),
        'file' => 'inc/flat_deposit.admin.inc',
        'access arguments' => array('admin deposit module'));

    //FLAT_BUNDLE
    $items['islandora/object/%islandora_object/add_bundle'] = array(
        'title' => 'Add bundle',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_bundle_add_bundle',
        'page arguments' => array(2),
        'access callback' => 'islandora_object_manage_access_callback',
        'access arguments' => array(array(ISLANDORA_MANAGE_PROPERTIES,), 2),
        'weight' => 99,
    );

    // FLAT_Collection
    $items['islandora/object/%islandora_object/manage/access'] = array(
        'title' => 'User write access',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_supercollection_admin',
        'page arguments' => array(2),
        'access callback' => 'islandora_object_manage_access_callback',
        'access arguments' => array(
            array(ISLANDORA_MANAGE_PROPERTIES,), 2),
        'weight' => 95,
        );

    // FLAT_Collection
    $items['islandora/object/%islandora_object/add_collection'] = array(
        'title' => 'Add collection',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'file' =>'inc/flat_collection.add_collection.inc',
        'page arguments' => array('flat_collection_add_form',2),
        'access callback' => 'islandora_object_manage_access_callback',
        'access arguments' => array(
            array(
                ISLANDORA_MANAGE_PROPERTIES,
            ), 2),
        'weight' => 95,
    );


/*

    // bundle cmdi file selection form
    $items['node/%node/cmdi/select'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_cmdi_select_form',1),
        'file' => 'inc/flat_deposit.cmdi_select.inc',
        'access arguments' => array('use deposit module'),
    );

*/
    // bundle cmdi file creator form
    $items['node/%node/cmdi'] = array(
        'title' => 'Flat bundle cmdi generation',
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_cmdi_form',1),
        'file' => 'inc/flat_deposit.cmdi_form.inc',
        'access arguments' => array('use deposit module', 1),
    );

/*
    //FLAT_COLLECTION
    // flat_supercollection entity rendering
    $items['flat_supercollection/%entity_object'] = array(
        'load arguments' => array('flat_supercollection'),
        'title callback' => 'flat_supercollection_page_title',
        'title arguments' => array(1),
        'page callback' => 'entity_ui_entity_page_view',
        'page arguments' => array(1),
        'access arguments' => array('view collection'),

    );

*/


    return $items;
}



function flat_supercollection_admin(AbstractObject $object){

 #   print_r('hello');
}

/**
 * Implements hook_menu_local_task_alter
 *
 */

function flat_deposit_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
    if (isset($data['tabs'][0]['output'])){
        $tabs = $data['tabs'][0]['output'];
        foreach ($tabs as $index => $tab) {
            /*
            // Remove the 'Add bundle'-menu from every islandora object view if user is not member of the collection
            if ($tab['#link']['path'] == 'islandora/object/%/add_bundle') {
                $pid_parent = explode('/', $tab['#link']['tab_parent_href']);
                $pid_parent = end($pid_parent);

                module_load_include('php', 'flat_deposit', 'inc/drupal_queries');
                $collections = query_user_supercollections(array( $pid_parent));

                if (empty($collections)) {
                    $data['tabs'][0]['output'][$index]['#link']['access'] = FALSE;
                    unset($data['tabs'][0]['output'][$index]);
                }

            }
            */
            // Remove edit- menu from node view
            if ($tab['#link']['path'] == 'node/%/edit') {

                $data['tabs'][0]['output'][$index]['#link']['access'] = FALSE;
                unset($data['tabs'][0]['output'][$index]);

            }
        }
    }

    #krumo($data);
}



/**
 * Implements hook_theme().
 */
function flat_deposit_theme() {
    $themes = array(
        'image_link' => array(
            'variables' => array(
                'link' => array(
                    'text' =>'Link text',
                    'path' => 'path/to/ref',
                    'options' => array(
                        'attributes' => array(),
                        'html' => FALSE,
                    ),
                ),
                'image' => array(
                    'path' => $GLOBALS['base_url'] . '/sites/all/themes/flat_bootstrap_theme/favicon.ico',
                    'alt' => 'Image title',
                    'title' => 'image title',
                    'attributes' => array(),
                )
            )
        ),

        'flat_collection_form_table' => array(
            'render element' => 'form',
        ),
        'flat_bundle_action_table' => array(
            'render element' => 'form',
        ),
    );

    return $themes;

}




/**
 * Theme function that translates our input into renderable HTML
 *
 * $param variables array of data to be rendered
 * @return string HTML code
 */
function theme_image_link($variables) {

    $title = check_plain($variables['link']['text']);
    $link = url($variables['link']['path']);

    $themed_image = theme_image($variables['image']);
    $themed_link = theme_link($variables['link']);

    $output = '<a href="' . $link . '" title="' . $title .'">' . $themed_image .'</a><br/>';
    $output .= $themed_link . '<br/>';

    return $output;
}



function theme_flat_collection_form_table($variables)
{
    // Note: $form will be $form['table_container'] from your
    // form definition, as that is the element that #theme was
    // applied to.
    $form = $variables['form'];

// Define our $header and $rows variables
    $header = array(t('Name'), t('ID'), t('link'),t('Activate'));
    $rows = array();

    foreach(element_children($form) as $index) {

        $row = array();

        $row[] = drupal_render($form[$index]['label']);
        $row[] = drupal_render($form[$index]['pid']);
        $row[] = drupal_render($form[$index]['link']);
        $row[] = drupal_render($form[$index]['activate']);

        $rows[] = $row;
    }

    // Return the themed table:
    return theme('table', array('header' => $header, 'rows' => $rows));
}


function theme_flat_bundle_action_table($variables)
{
    // Note: $form will be $form['table_container'] from your
    // form definition, as that is the element that #theme was
    // applied to.
    $form = $variables['form'];

// Define our $header and $rows variables
    $header = array(t('Bundle Name'), t('Status'),t('Metadata'), t('Select'));
    $rows = array();

    foreach(element_children($form) as $index) {

        $row = array();

        $row[] = drupal_render($form[$index]['title']);
        $row[] = drupal_render($form[$index]['status']);
        $row[] = drupal_render($form[$index]['metadata']);
        $row[] = drupal_render($form[$index]['checked']);

        $rows[] = $row;
    }

    // Return the themed table:
    return theme('table', array('header' => $header, 'rows' => $rows));
}


/**
 * FLAT_BUNDLE RELATED FUNCTIONS
 */


/**
 * Implements hook_node_info
 *
 * makes custom content type flat_bundle available
 */
function flat_deposit_node_info() {
    return array(
        'flat_bundle' => array(
            'name' => t('FLAT upload bundle'),
            'base' => 'flat_bundle',
            'description' => t('A bundle of one or more data files upload entity'),
        ),
        'flat_collection' => array(
            'name' => t('FLAT upload collection'),
            'base' => 'flat_collection',
            'description' => t('A container node for subcollections and bundles'),
        )
    );
}


function flat_bundle_add_bundle($pid){
    global $user;


// Query all flat_collection nodes that are owned by the user and have no empty fedora_fid (flat_fid) value.
    // Resulting nodes will be added as options with the node's nid as option-key and node's title as option-labels.
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'flat_collection')
        ->propertyCondition('uid', $user->uid)
        ->fieldCondition('flat_fid', 'value',  $pid->id, '=')
        ->execute();
    if (!empty($entities['node']) AND count($entities['node']) == 1) {
        foreach ($entities['node'] as $entity){
            $nid = $entity->nid;

            $parent_node = node_load($nid);
            $value = $parent_node->title;
            $custom = ['nid' => $nid, 'value' => $value];
        }

    } else {

        $custom = NULL;
        drupal_set_message('Unable to find user link to this collection. Parent collection needs to assigned manually', 'warning');

    }


    module_load_include('inc', 'node', 'node.pages');

    $node_type = 'flat_bundle';
    $types = node_type_get_types();
    #$collection = $collections ['collection_name'][0];


    $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $node_type, 'language' => LANGUAGE_NONE);
    drupal_set_title(t('Create @name', array('@name' => $types[$node_type]->name)), PASS_THROUGH);
    $form = drupal_get_form($node_type . '_node_form', $node, $custom);

    return $form;

}

/**
 * Implements hook_form.
 *
 *  flat_bundle add/edit form
 *
 */
function flat_bundle_form($node, $form_state)
{

    return node_content_form($node, $form_state);
}



/**
 * Implements hook_form.
 *
 *  flat_collection add/edit form
 *
 */
function flat_collection_form($node, $form_state) {
    return node_content_form($node, $form_state);
}



/**
 * Implements hook_form_FORMID_alter.
 *
 * changes visibility and accessibility of certain node fields and addz collection-selection options based on users membership
 *
 */
function flat_deposit_form_flat_bundle_node_form_alter(&$form, &$form_state, $form_id)
{

    if (isset($form['additional_settings'])) $form['additional_settings']['#access'] = false;
    if (isset($form['revision_information'])) $form['revision_information']['#access'] = false;

    $form['flat_parent_nid']['und']['#required'] = false; //remove after next install

    global $user;
    // Hide unwanted buttons anf fields
    hide($form['flat_bundle_status']);
    hide($form['flat_exception']);
    hide($form['flat_create_cmdi']);
    hide($form['flat_external']);
    hide($form['flat_location']);
    hide($form['flat_original_path']);
    hide($form['flat_parent_title']);

    hide($form['actions']['preview']);

    // prevent deletion of a node to run through validation
    $form['actions']['delete']['#limit_validation_errors'] = array();


    // Conditionally hide cmdi file field.
    $form['flat_cmdi_file']['und'][0]['#states'] = array(
        'visible' => array(
            array(
                array(':input[name="flat_cmdi_option[und]"]' => array('value' => 'import')),
                'or',
                array(':input[name="flat_cmdi_option[und]"]' => array('value' => 'template')),
            ),
        ),
        'required' => array(
            array(
                array(':input[name="flat_cmdi_option[und]"]' => array('value' => 'import')),
                'or',
                array(':input[name="flat_cmdi_option[und]"]' => array('value' => 'template')),
            ),
        ),
    );


    // Query all flat_collection nodes that are owned by the user and have no empty fedora_fid (flat_fid) value.
    // Resulting nodes will be added as options with the node's nid as option-key and node's title as option-labels.
    $options = [];
    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'flat_collection')
        ->propertyCondition('uid', $user->uid)
        ->fieldCondition('flat_fid', 'value',  'NULL', '!=')
        ->execute();

    if (!empty($entities['node'])) {
        foreach ($entities['node'] as $entity) {
            $nid = $entity->nid;
            $collection_node = node_load($nid);
            #$wrapper = entity_metadata_wrapper('node', $node);
            #$fid = $wrapper->flat_fid->value();
            $options[$nid] = $collection_node->title;
        }
    }

    // Adapt parent node related fields
    $form['flat_parent_title']['und']['#disabled'] = TRUE;
    $form ['flat_parent_nid']['und']['#empty_value'] = 0;
    $form ['flat_parent_nid']['und']['#empty_option'] = 'unassigned';
    $form ['flat_parent_nid']['und']['#options'] = $options;


    // Form alterations depending on node status
    $node = $form_state['node'];
    $node_status = (!isset($node->nid) || isset($node->is_new)) ? 'create' : 'edit';
    switch ($node_status){

        case 'create':{

            // Create selection of collections.
            // This is dependent from extra parameters. In case the name of a collection is provided only that specific collection can be used
            // Otherwise options are queried based on collection membership
            $args = $form_state['build_info']['args'];

            if (isset($args[1])) {

                $form['flat_parent_nid']['und']['#default_value'][] = (string)$args[1]['nid'];
                $form['flat_parent_nid']['und']['#disabled'] = TRUE;

                $form['flat_parent_title']['und'][0]['value']['#default_value'] = $args[1]['value'];
            }

            ///////////
            // Add local project directory selection form container element
            // #state attribute makes it only visible if flat_source field is set to 'local'
            ///////////
            module_load_include('inc','flat_deposit','inc/class.Workspaces');
            module_load_include('inc', 'node', 'node.pages');
            $form['workspace_navigation'] = Workspaces::get_container();
            form_load_include($form_state, 'inc', 'node', 'node.pages');

            // set the local departments' project folder
            $config_names = variable_get('flat_deposit_names');
            $department = !empty($form_state['values']['department']) ? $form_state['values']['department'] : 'none';
            $projects_directory = 'local://' . $department . '/' . $config_names['workspace_folder'];

            //Scan project directory; non-existing directories will return false, existing dirs will populate the
            // projects field options
            // todo filter projects for permissions
            $projects = Workspaces::getSubdirectoryNames($projects_directory, ['isAccessibleDir']);

            if (!empty($projects)){
                $form['workspace_navigation']['field']['project']['#options'] = drupal_map_assoc($projects);
                $form['workspace_navigation']['field']['project']['#access'] = TRUE;
            }

            $project = !empty($form_state['values']['project']) ? $form_state['values']['project'] : 'none';
            $project_root = $projects_directory . '/' . $project . '/' . $config_names['archive_folder'];


            // Get original directory value.
            $current =  Workspaces::get_flat_original_path($form_state, $project_root);

            // (if chosen) extend 'current' directory value with value of next_directories
            if (!empty($form_state['values']['next_directories'])) {

                $current .= "/" . $form_state['values']['next_directories'];
                unset($form_state['values']['next_directories']);
                $form['workspace_navigation']['field']['next_directories']['#options'] = array();
                $form['workspace_navigation']['field']['next_directories']['#access'] = FALSE;

            }

            // alter default value of the flat_original_path field to attach value of current directory to flat_bundle node
            $form['flat_original_path']['und'][0]['value']['#default_value'] = $current;

            // print result to screen
            $form['workspace_navigation']['field']['current_directory']['#markup'] = '</br>currently selected archive directory: <strong>' . str_replace('local://' ,'', $current. '</strong>');


            // Add button to go back to previous level
            if ($current != $project_root AND !empty($current)) {
                $form['workspace_navigation']['field']['previous_directory']['#access'] = TRUE;
            }

            // Add dropdown menu with lower level directories to go into
            $subDirs = Workspaces::getSubdirectoryNames($current, ['isAccessibleDir']);
            if (!empty($subDirs)){
                $form['workspace_navigation']['field']['next_directories']['#options'] = drupal_map_assoc($subDirs);
                $form['workspace_navigation']['field']['next_directories']['#access'] = TRUE;
            }

            // custom validation and submission
            $form['#validate'][] = 'flat_bundle_node_form_add_validate';
            $form['#submit'][] = 'flat_bundle_node_form_add_submit';

            break;
        }

        // for existing bundles:
        case 'edit':{


            $node_wrapper = entity_metadata_wrapper('node', $node);

            // prevent altering bundle name (title), policy
            $form['title']['#disabled'] = TRUE;
            $form['flat_policies']['und']['#disabled'] = TRUE;
            $form['flat_cmdi_option']['und']['#disabled'] = TRUE;
            $form['flat_source']['und']['#disabled'] = TRUE;


            // hide cmdi file field
            $status = $node_wrapper->flat_bundle_status->value();
            if ($status != 'open' AND $status != 'failed')  {
                hide($form['flat_cmdi_file']);
                $form['flat_parent_nid']['und']['#disabled'] = TRUE;
            }

            // set default_value of parent_nid and parent_title
            $parent_nid = $node_wrapper->flat_parent_nid->value();
            $form['flat_parent_nid']['und']['#default_value'][] = $parent_nid;

            $collection_name = $node_wrapper->flat_parent_title->value();
            $form['flat_parent_title']['und']['#default_value'][] = $collection_name;


            $form['#validate'][] = 'flat_bundle_edit_node_form_validate';
            $form['#submit'][] = 'flat_bundle_edit_node_form_submit';



            break;
        }
    }
}

function workspace_navigation_previous_directory_submit($form, &$form_state) {

    // alter saved current_directory value
    $form_state['values']['flat_original_path']['und'][0]['value'] = dirname($form_state['values']['flat_original_path']['und'][0]['value']);

    // unset next_directories value
    $form_state['values']['next_directories'] = '';

    $form_state['rebuild'] = TRUE;
}


#function flat_bundle_node_form_add_submit($form, &$form_state){}


/**
 * Validation of flat_bundle node edits. At the moment this is only assigning a bundle to a different collection
 * @param $form
 * @param $form_state
 * @return mixed
 */
function flat_bundle_edit_node_form_validate($form, &$form_state){

    $node = $form_state['node'];
    $wrapper = entity_metadata_wrapper('node', $node);

    $original_collection_nid = $wrapper->flat_parent_nid->value();
    $new_collection_nid = (string)$form_state['values']['flat_parent_nid']['und'][0]['value'];

    // If parent nid has changed
    // get name of collection
    if ((integer)$new_collection_nid != 0){

        $collection_node = node_load($new_collection_nid);
        $new_collection_name = $collection_node->title;

    } else {

        $new_collection_name = 'unassigned';

    }

    // Set parent nid value of this bundle to the name of the new collection
    $form_state['values']['flat_parent_title']['und'][0]['value'] = $new_collection_name;

    // If parent nid has not changed pass validation
    if ($original_collection_nid === $new_collection_nid){
        form_set_error('flat_parent_nid', 'collection has not changed');
        return $form;
    }

    // Validate that no record.cmdi exists with metadata related to a collection and then, the collection changes
    $cmdi_option = $wrapper->flat_cmdi_option->value();
    $cmdi_file = $wrapper->flat_cmdi_file->value();
    if ($cmdi_option == 'new' AND $new_collection_name == 'unassigned' AND !is_null($cmdi_file)){

        form_set_error('flat_parent_nid', 'It is not possible to change the collection if new metadata file has been saved. Please remove record.cmdi first');
        return $form;

    }


    //Check that bundle name within collection is distinctive from existing bundles, otherwise we get problems with creating new folders.
    $user_id = $node->uid ;
    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');
    $unique = FlatBundle::checkUniquenessNaming($user_id, $new_collection_name, $wrapper->title);

    if (!$unique) {

        form_set_error('title', t('Bundle with same or very similar bundle name exists'));
        return $form;
    }
    /*
*/
    // Move files to new location
    $new_location = FlatBundle::moveBundleData($node, 'data', 'unfreeze', $new_collection_name);

    if (!$new_location){

        form_set_error('flat_parent_title', 'Unable to move files to new location');
        return $form;
    }


    $form_state['values']['flat_location']['und'][0]['value'] = $new_location;

    if(!is_null($wrapper->flat_cmdi_file->value())){

        $move = FlatBundle::moveBundleData($node, 'metadata', 'unfreeze', $new_collection_name);

        if(!$move) {

            form_set_error('flat_parent_title', 'Unable to move metadata to new location');
            return $form;

        }

    }
}


function flat_bundle_edit_node_form_submit($form, &$form_state) {

    #Wdrupal_set_message('Bundle has been edited');
}


/**
 * Flat_bundle node validator called every time a flat_bundle node is created or edited (also AJAX!!)
 * @param $node
 * @param $form
 * @param $form_state
 */
function flat_bundle_validate($node, $form, &$form_state){
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $source = $node_wrapper->flat_source->value();
    $original_path = $node_wrapper->flat_original_path->value();
    if ($source == 'local' ){

        if (!file_exists($original_path)) {

            form_set_error('flat_location',t('Location needs to be set when data is located on archive server'));

        }
    }

}

/**
 * Flat_bundle creation validation
 */
function flat_bundle_node_form_add_validate($form, &$form_state){
    $source = $form_state['values']['flat_source']['und'][0]['value'];
    $original_path = $form_state['values']['flat_original_path']['und'][0]['value'];

    $bundle_name = $form_state['values']['title'];

    // Get collection name of this bundle by loading the collection node using the value 'parent_nid'
    $collection_nid = (string)$form_state['values']['flat_parent_nid']['und'][0]['value'];

    if ((integer)$collection_nid != 0){
        $collection_node = node_load($collection_nid);
        $collection = $collection_node->title;
    } else{
        $collection = 'unassigned';
    }

    $form_state['values']['flat_parent_title']['und'][0]['value'] = $collection;



    //Validate bundle name
    if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $bundle_name)) {
        form_set_error('title', t('Allowed are all letters, numbers and underscores (max length 40)'));
    }

    //Check that bundle name within collection is distinctive from existing bundles, otherwise we get problems with creating new folders.
    $user_id = $GLOBALS['user']->uid ;

    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');
    $unique = FlatBundle::checkUniquenessNaming($user_id, $collection, $bundle_name);

    if (!$unique) {
        form_set_error('title', t('Bundle with same or very similar bundle name exists'));
    }


#    form_set_error('debug', 'debug');
 #   return $form;

}


/**
 * Submission handler for newly created bundles
 */
function flat_bundle_node_form_add_submit($form, &$form_state){


    $bundle = $form_state['values']['title'];
    $collection = $form_state['values']['flat_parent_title']['und'][0]['value'];

    // initiate user directories if necessary
    module_load_include('inc', 'imce', 'inc/imce.page');
    global $user;
    imce_initiate_profile ($user);

    // Determine directories for metadata and resources
    $meta_dir = 'metadata://' . str_replace('@' ,'_at_' , $user->name) . "/$collection/$bundle";


    // Resources might be locally found or external
    $source = $form_state['values']['flat_source']['und'][0]['value'];
    if ($source == 'local') {

        $resource_dir = $form_state['values']['flat_original_path']['und'][0]['value'];

    } else {

        $resource_dir = 'external://' . str_replace('@' ,'_at_' , $user->name) . "/$collection/$bundle";

    }


    // Create bundle data and metadata directories
    if (!file_exists($resource_dir)) drupal_mkdir($resource_dir, NULL, TRUE);
    if (!file_exists($meta_dir)) drupal_mkdir($meta_dir, NULL, TRUE);


    // Add resource_directory to node
    $form_state['values']['flat_location']['und'][0]['value'] = $resource_dir;

    // Adapt Is part of collection info

}

/**
 * Implements hook_view().
 */
function flat_collection_view($node, $view_mode) {

    if ($view_mode == 'full' && node_is_page($node)) {
        $output = field_view_field('node', $node, 'flat_fid');

        $wrapper = entity_metadata_wrapper('node', $node);
        $val = $wrapper->flat_fid->value();

        $node->content['flat_fid'] = array(
            '#weight' => 10,
            '#theme' => 'link',
            '#path' => 'islandora/object/' . $val,
            '#text' => t('Shortcut to archived collection'),
            '#options' => array(
                'attributes' => array(),
                'html' => FALSE,
                ),
            );
        #flat_fid

        // Add form to node
        module_load_include('inc', 'flat_deposit','/inc/flat_collection.bundle_actions');
        $extra_form = drupal_get_form('flat_collection_bundle_action_form', $node);
        $node->content['extra_form'] = $extra_form;
        $node->content['extra_form']['#weight'] = 998;



    }

    return $node;
}



/**
 * Implements hook_view().
 */
function flat_bundle_view($node, $view_mode) {


    $wrapper = entity_metadata_wrapper('node', $node);

    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
        drupal_set_breadcrumb(array(
                l(t('Home'),  NULL),
                l(t('!name', array ('!name'=> $wrapper->flat_parent_title->value())),'node/' . $wrapper->flat_parent_nid->value()),
        ));


        $exception = field_get_items('node', $node, 'flat_exception')[0]['value'];
        if ($exception) {
            $node->content["flat_exception"] = field_view_field('node', $node, 'flat_exception');
        }
    }


    return $node;
}


/**
 *
 * Implements hook_node_view()
 *
 *
 * Act on a node being viewed.
 *
 * @param $node
 * The node that is being view.
 *
 * @param $view_mode
 * The view mode of node.
 *
 * @param $langcode
 * The language of node.
 *
 * @ingroup node_api_hooks
 */
function flat_deposit_node_view($node, $view_mode, $langcode)
{
    if ($node->type == 'flat_bundle' AND $view_mode == 'full' AND node_is_page($node)) {
        unset ($node->content['flat_original_path']);
        unset ($node->content['flat_bundle_status']);
        unset ($node->content['flat_parent_nid']);
        unset ($node->content['flat_parent_title']);
        unset ($node->content['flat_cmdi_option']);
        unset ($node->content['flat_policies']);
        unset ($node->content['flat_source']);
        unset ($node->content['flat_external']);
        unset ($node->content['flat_location']);
    }

}

/**
 * Implements hook_delete().
 */
function flat_bundle_delete($node){

    global $user;

    $bundle = $node->title;
    $wrapper = entity_metadata_wrapper('node',$node);
    $collection = $wrapper->flat_parent_title->value();

    $tail = str_replace('@' ,'_at_' , $user->name) . "/$collection/$bundle";

    $bundle_resources_directory = drupal_realpath('external://') . "/$tail";
    $bundle_metadata_directory = drupal_realpath('metadata://') . "/$tail";

    $bundle_resources_freeze_directory = drupal_realpath('freeze://data') . "/$tail";
    $bundle_metadata_freeze_directory = drupal_realpath('freeze://metadata') . "/$tail";


    $dirs = [$bundle_resources_directory, $bundle_metadata_directory, $bundle_resources_freeze_directory, $bundle_metadata_freeze_directory];

    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');

    foreach ($dirs as $dir){
        if (file_exists($dir)){
            FlatBundle::recursiveRmDir($dir);
            rmdir ($dir);
        }
    }



}

/**
 * Implements hook_block_info().
 */
function flat_deposit_block_info()
{
    $blocks = array();


    $blocks['node_actions'] = array(
        'info' => t('FLAT deposit upload bundle actions '),
        'status' => TRUE,
        'weight' => -999,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php $val = (is_numeric(arg(1)) AND arg(2) == FALSE ) ? TRUE :  FALSE; return $val; ?>'
    );



    $blocks['flat_deposit_menu'] = array(
        'info' => t('FLAT deposit main menu'),
        'status' => TRUE,
        'region' => 'sidebar_second',
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => 'islandora/*',

    );

    $blocks['flat_deposit_collections'] = array(
        'info' => t('FLAT deposit form with owned collections living in fedora'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'my_collections',
        'weight' => -18,

    );

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function flat_deposit_block_view($delta = '')
{

    switch ($delta){
        case 'node_actions':

            $node = menu_get_object();
            $node_wrapper = entity_metadata_wrapper('node', $node);

            module_load_include('inc','flat_deposit','inc/flat_bundle.actions_form');


            $form = drupal_get_form('flat_bundle_action_form');
            $rendered_form = drupal_render($form);

            $block = array(
                'subject' => '',
                'content' => $rendered_form,
            );
            break;

        case 'flat_deposit_menu':
            $image_links = array(
                'link_workspace' => array(
                    'name' => 'My bundles',
                    'href' => 'workspace',
                    'image_path' => drupal_get_path('module','flat_deposit') .'/Images/Upload.png',
                ),
                'link_my_collections' => array(
                    'name' => 'My collections',
                    'href' => 'my_collections',
                    'image_path' => drupal_get_path('module','flat_deposit') .'/Images/Manage_coll.png',
                ),

            );

            $output = array();
            // Create complete variables to be sent to theme_image_link
            foreach ($image_links as $key => $image_link) {

                $variables = array(
                    'link' => array(
                        'text' => $image_link ['name'],
                        'path' => $image_link ['href'],
                        'options' => array(
                            'attributes' => array(),
                            'html' => FALSE,),
                    ),
                    'image' => array(
                        'path' => $image_link['image_path'],
                        'alt' => $image_link ['name'],
                        'title' => $image_link ['name'],
                        'attributes' => array(),
                    )
                );

                // Attach render array to array of outputted block items.
                $output [$key] = array(
                    '#prefix' => '<div>',
                    '#type' => 'markup',
                    '#markup' => theme('image_link', $variables),
                    '#suffix' => '</div>',
                );
            }

            $block = array (
                'subject' => t('FLAT Deposit Main Menu'),
                'content' => array(
                    'deposit_menus' =>$output )
            );
            break;

        case 'flat_deposit_collections':
            module_load_include('inc','flat_deposit','/inc/flat_collection.fedora_collections_actions');
            $block['subject'] = t('All inactive collections in repository');
            $block['content'] = drupal_get_form('flat_fedora_collections_form');
            break;


    }


    return $block;

}









/**
 * FLAT_COLLECTION RELATED FUNCTIONS
 */


/**
 * Implements hook_entity_info
 *
 * makes custom entity type flat_supercollection available
 */
function flat_deposit_entity_info() {
    $entities = array();

    $entities['flat_supercollection'] = array(

        // Define basic information.
        'label' => t('FLAT Supercollection'),
        'plural label' => t('FLAT Supercollections'),
        'fieldable' => FALSE,

        // Provide information about the database table.
        'base table' => 'flat_supercollection',
        'entity keys' => array(
            'id' => 'collection_id',
            'label' => 'label',

        ),

        // Use classes from the Entity API module.
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',

        // Have Entity API set up an administrative UI.
        'admin ui' => array(
            'path' => 'admin/supercollections',
            'file' => 'inc/flat_supercollections.inc'
        ),
        'module' => 'flat_deposit',
        'access callback' => 'flat_supercollection_access',

        // For content-type entities only, define the callback that
        // returns the URL for the entity.
        'uri callback' => 'flat_supercollection_uri',
    );

    return $entities;
}


/*
 * Sets the page title of flat_supercollections to collection name
 */
function flat_supercollection_page_title($entity){
    return $entity->collection_name;
}


// For content-type entities, return the URI for an entity.
function flat_supercollection_uri($entity) {
    return array(
        'path' => 'flat_supercollection/' . $entity->collection_id,
    );
}


/**
 * Access callback: Checks entity access.
 *
 * From "Defining an Entity Type in Drupal 7", chapter 4.
 *
 * @param string $op
 *   Operation to check: 'view', 'update', 'create', etc.
 * @param object|null $entity
 *   Object to check access on, or NULL to check for all entities.
 * @param object|null $account
 *   Account to check access permissions for. NULL means "current user".
 *
 * @return bool
 *   TRUE to allow access; FALSE to deny access.
 */
function flat_supercollection_access($op, $entity, $account = NULL) {
    if ($op == 'view') {
        return user_access('view collection', $account);
    }

    // All other operations use the generic "administer" permission.
    return user_access('administer collection', $account);
}

/**
 * Implements hook_page_alter().
 */
function flat_deposit_page_alter(&$page)
{
    #krumo ($page);
}



/**
 * Implements hook_view().
 */
function flat_supercollection_view($node, $view_mode) {


    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation.  l() escapes title, so we should not escape !name.manage
        drupal_set_breadcrumb(array(
            l(t('Home'), NULL),
            l(t("!name's bundles", array(
                '!name' => format_username($node))), 'flat_bundle/' . $node->uid)));

        $exception = field_get_items('node', $node, 'flat_exception')[0]['value'];
        if ($exception) {
            $node->content["flat_exception"] = field_view_field('node', $node, 'flat_exception');
        }
    }

    return $node;
}





