<?php
/**
 * @file
 * Deposit UI installation
 */

/**
 * Implements hook_install().
 */
function flat_deposit_ui_install()
{
    $t = get_t();

    //basic settings
    module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    flat_deposit_set_paths();
    flat_deposit_set_names();
    flat_deposit_set_owncloud();


    // Add flat bundle content type
    // This content type is the core entity that will contain information about each upload
    $content_type = array(
        'type' => 'flat_bundle',
        'name' => $t('FLAT Upload bundle'),
        'description' => $t('A bundle of one or more data files upload entity'),
        'title_label' => $t('Name of the upload bundle'),
        'base' => 'flat_bundle', #declare to be able to use content type hooks
        'custom' => TRUE
    );
    // Set remaining definitions with defaults
    $node_type = node_type_set_defaults($content_type);
    node_type_save($node_type);

    // switch off comments for content type _flat_bundle
    variable_set('comment_flat_bundle', '0');

    // switch off promotion of new entries to front
    $node_options = variable_get('node_options_flat_bundle', array());
    $promote_key = array_search('promote', $node_options);
    if ($promote_key !== false) {
        unset($node_options[$promote_key]);
        variable_set('node_options_flat_bundle', $node_options);
    }


    // Attach fields to the flat bundle content type by creating fields and instances of these fields
    $fields = array();

    $fields['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(),
            'locked' => TRUE
    );
    $fields['upload_status'] = array(
        'field_name' => 'upload_status',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values' => array(
                'open' => 'open',
                'awaiting' => 'awaiting',
                'archived' => 'archived',
                'processing' => 'processing',
                'failed' => 'failed'
            )
        ),
        'locked' => TRUE
    );
    $fields['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 255)
    );
    $fields['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 5000)
    );
    $fields['upload_cmdi'] = array(
        'field_name' => 'upload_cmdi',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array()
    );
    $fields['upload_external'] = array(
        'field_name' => 'upload_external',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values'=> array(
                0 => "no",
                1 => "yes"),
        ),
    );
    $fields['upload_location'] = array(
        'field_name' => 'upload_location',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 5000)
    );

    foreach ($fields as $field) {
        field_create_field($field);}

    $instances = array();

    $instances['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'label' => $t('Name of the collection'
        ),
        'description' => $t('The collection to which the upload bundle belongs'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            )
        ));

    $instances['upload_status'] = array(
        'field_name' => 'upload_status',
        'label' => $t('Status of the upload'
        ),
        'description' => $t('Is the bundle open, awaiting or archived'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'required' => TRUE,
        'default_value' => array(
            0 => array('value'=> 'open')),
        'settings' => array('text_processing' => 0),
        'no_ui' => TRUE,
        'display' => array(
            'default' => array(
                'label' => 'inline',
            )
        )
    );

    $instances['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'label' => $t('Exception'
        ),
        'description' => $t('Did any errors occur during upload'),
        'widget' => array(
            'type' => 'text_textfield'
        ),
        'required' => FALSE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'type' => 'hidden',
                'label' => 'inline',
            ),
            'error' => array(
                'label' => 'inline',
            ),
        )
    );
    $instances['upload_cmdi'] = array(
        'field_name' => 'upload_cmdi',
        'label' => $t('Meta data'
        ),
        'description' => $t('Is there a file describing the upload bundle'),
        'widget' => array(
            'type' => 'options_buttons'
        ),
        'required' => FALSE,
        'default_value' => array(
            0 => array('value'=> "0")),
        'settings' => array(
            'text_processing' => 0,
            'display_label' => 1),
        'display' => array(
            'default' => array(
                'type' => 'hidden',
                'label' => 'inline',
            )
        )
    );

    $instances['upload_external'] = array(
        'field_name' => 'upload_external',
        'label' => $t('Data is located on archive server'
        ),
        'description' => $t('Check this option if data is not uploaded using this side but if it is already available on the archive server'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'default_value' => array(
            0 => array('value'=> '0')),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),


        )
    );

    $instances['upload_location'] = array(
        'field_name' => 'upload_location',
        'label' => $t('Location where data is stored'
        ),
        'description' => $t('Location where archive server can find data to be uploaded'),
        'widget' => array(
            'type' => 'text'
        ),
        'required' => FALSE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            ),

        )
    );
    foreach ($instances as $instance){
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'flat_bundle';
        field_create_instance($instance);
    }

    // Add owncloud integration field to user entity type
    $field = array(
        'field_name' => 'mount_owncloud',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values'=> array(
                0 => "Unavailable",
                1 => "Available"),
        ),

    );
    field_create_field($field);
    $instance = array(
        'field_name' => 'mount_owncloud',
        'entity_type' => 'user',
        'bundle' => 'user',
        'label' => 'Owncloud integration',
        'settings' => array('user_register_form' => 1),
        'widget' => array(
            'type' => 'options_button', // or whatever widget type you want
        ),
        'default_value' => array(
            0 => array('value'=> '0'))
    );
    field_create_instance($instance);


    // enable blog functionality in order to allow the backend to create ingest reports
    module_enable(array('blog','flat_views'));

}



/**
 * Implements hook_schema().
 */
function flat_deposit_ui_schema() {

    // Table keeping track of existing collections
    $schema['flat_deposit_ui_collection'] = array(
        'description' => 'Collection-member relation in FLAT.',
        'fields' => array(
            'collection_id'  => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => 'Unique ID of each member collection relation'
            ),
            'collection_name'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'Name of the collection'
            ),
            'collection_tree'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'Complete path of collection (from root collection to final subdirectory)'
            ),
            'collection_pid'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'PID assigned by fedora to collection'
            ),
            'member' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => FALSE,
                'description' => 'Member of the collection.'
            ),
            'label'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'label of the relation'
            ),
            'language' => array(
                'description' => 'language of the displayed entity',
                'length' => 12,
                'type' => 'varchar',
                'not null' => TRUE,
                'default' => ''
            ),
            'date_created' => array(
                'description' => 'Date when entry was created',
                'type' => 'int',
                'not null' => TRUE,
            ),
        ),

        'primary key' => array('collection_id'),
        'indexes' => array(
            'language' => array('language'),)
    );


    return $schema;
}


/**
 * Implements hook_uninstall().
 */
function flat_deposit_ui_uninstall(){
    $t = get_t();

    module_disable(array('blog','flat_views'));
    drupal_uninstall_modules(array('blog'));

    // Delete all user data from drupal user data folder and freeze folder
    module_load_include('php', 'flat_deposit_ui', 'inc/php_functions');
    module_load_include('inc', 'flat_deposit_ui', 'Helpers/owncloud_api');
    $users = entity_load('user');

    foreach ($users as $user){
        if(strlen($user->name) > 0){
            $user_data_directory =  drupal_realpath('public://users/' . $user->name);
            $user_freeze_directory =  variable_get('flat_deposit_paths',array())['freeze'] . "/$user->name";
            if (file_exists($user_data_directory) && $user_data_directory){
                recursiveRmDir($user_data_directory);
                rmdir ($user_data_directory);}
            if (file_exists($user_freeze_directory) && $user_freeze_directory){
                recursiveRmDir($user_freeze_directory);
                rmdir ($user_freeze_directory);}

        }
    }

    drupal_set_message($t('All non-archived user project data files have been removed'));


    // Unmount all user drupal data directory mounts
    $oc = new OwnCloud();
    if ($oc->noErrors){
        $mounts = $oc->ListAllDrupalMounts();

        foreach (array_column($mounts,'mount_id') as $mount_id){

            $oc->UnmountUserArchiveMount($mount_id);
        };

    }

    drupal_set_message($t('All  user drupal data directory mounts have been unmounted'));

    // clean up global variables
    variable_del('flat_deposit_paths');
    variable_del('flat_deposit_names');
    variable_del('owncloud_settings');


    // Delete all flat_upload content type and notification nodes
    $nids = db_select('node','n')
        ->fields('n', array('nid'))
        ->condition('type', array('flat_collection_name', 'flat_member', 'flat_bundle', 'blog'), 'IN')
        ->execute()
        ->fetchCol();

    if (!empty ($nids)){
        node_delete_multiple($nids);
        drupal_set_message($t('Nodes containing Custom content types have been removed'));
    }

    
    //Remove all custom content type fields and field instances and clean up entries in field_config / field_config_instance tables
    field_attach_delete_bundle('node','flat_bundle');
    field_attach_delete_bundle('user', 'user');

    db_delete('field_config_instance')
        ->condition('deleted', 1)
        ->execute();

    field_purge_batch(1000);

    drupal_set_message($t('Custom field and field instances have been removed'));

    // Delete custom content type
    node_type_delete('flat_upload');
    drupal_set_message($t('Custom content type has been removed'));


    //Round up uninstall
    drupal_set_message($t('Deposit UI uninstalled'));
    module_disable(array('flat_deposit_ui_views','blog'),FALSE);
}
