<?php
/**
 * @file
 * Deposit UI installation
 */

/**
 * Implements hook_install().
 */
function flat_deposit_ui_install()
{

    module_load_include('inc', 'flat_deposit_ui', 'inc/config');

    flat_deposit_set_paths();
    flat_deposit_set_modules();
    flat_deposit_set_names();
    flat_deposit_set_owncloud();

    $t = get_t();

    // content type definition
    $content_type = array(
        'type' => 'flat_bundle',
        'name' => $t('FLAT Upload bundle'),
        'description' => $t('A bundle of one or more data files upload entity'),
        'title_label' => $t('Name of the upload bundle'),
        'base' => 'node_content', #declare to be able to use content type hooks
        'custom' => TRUE
    );

    // Set remaining definitions with defaults
    $node_type = node_type_set_defaults($content_type);

    node_type_save($node_type);

    #node_add_body_field($node_type, 'Description');

    $fields = array();

    $fields['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(),
            'locked' => TRUE
    );
    #$check_field_type = field_info_field_types('list_text');
    $fields['upload_status'] = array(
        'field_name' => 'upload_status',
        'type' => 'list_text',
        'cardinality' => 1,
        'settings' => array(
            'allowed_values' => array(
                'open' => 'open',
                'awaiting' => 'awaiting',
                'archived' => 'archived',
                'failed' => 'failed'
            )
        ),
        'locked' => TRUE
    );

    $fields['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 255)
    );
    $fields['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'type' => 'text',
        'cardinality' => 1,
        'settings' => array(
            'max_length' => 255)
    );
    
    $fields['upload_cmdi'] = array(
        'field_name' => 'upload_cmdi',
        'type' => 'list_boolean',
        'cardinality' => 1,
        'settings' => array()
    );
    
    foreach ($fields as $field) {
        field_create_field($field);
}


    $instances = array();

    $instances['upload_collection'] = array(
        'field_name' => 'upload_collection',
        'label' => $t('Name of the collection'
        ),
        'description' => $t('The collection to which the upload bundle belongs'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'required' => TRUE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'label' => 'inline',
            )
        ));

    $instances['upload_status'] = array(
        'field_name' => 'upload_status',
        'label' => $t('Status of the upload'
        ),
        'description' => $t('Is the bundle open, awaiting or archived'),
        'widget' => array(
            'type' => 'option_buttons'
        ),
        'required' => TRUE,
        'default_value' => array(
            0 => array('value'=> 'open')),
        'settings' => array('text_processing' => 0),
        'no_ui' => TRUE,
        'display' => array(
            'default' => array(
                'label' => 'inline',
            )
        )
    );

    $instances['upload_exception'] = array(
        'field_name' => 'upload_exception',
        'label' => $t('Exception'
        ),
        'description' => $t('Did any errors occur during upload'),
        'widget' => array(
            'type' => 'text_textfield'
        ),
        'required' => FALSE,
        'settings' => array('text_processing' => 0),
        'display' => array(
            'default' => array(
                'type' => 'hidden',
                'label' => 'inline',
            ),
            'error' => array(
                'label' => 'inline',
            ),
        )
    );
    $instances['upload_cmdi'] = array(
        'field_name' => 'upload_cmdi',
        'label' => $t('Meta data'
        ),
        'description' => $t('Is there a file describing the upload bundle'),
        'widget' => array(
            'type' => 'options_buttons'
        ),
        'required' => FALSE,
        'default_value' => array(
            0 => array('value'=> "0")),
        'settings' => array(
            'text_processing' => 0,
            'display_label' => 1),
        'display' => array(
            'default' => array(
                'type' => 'hidden',
                'label' => 'inline',
            )
        )
    );
    foreach ($instances as $instance){
        $instance['entity_type'] = 'node';
        $instance['bundle'] = 'flat_bundle';
        field_create_instance($instance);
    }
}


/**
 * Implements hook_schema().
 */
function flat_deposit_ui_schema() {

    $schema['flat_deposit_ui_upload'] = array(
        'description' => 'Logging of all uploading activity.',
        'fields' => array(
            'uid'  => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => 'ID of the upload instance'
            ),
            'user_id'  => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => TRUE,
                'description' => 'User ID'
            ),
            'bundle' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => FALSE,
                'description' => 'Persistent ID of bundle.'
            ),
            'pid_bundle' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => FALSE,
                'description' => 'Bundle name.'
            ),
            'collection' => array(
                'type' => 'varchar',
                'length' => 127,
                'not null' => FALSE,
                'description' => 'Name of the project / corpus.'
            ),
            'status' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => TRUE,
                'description' => 'Name given to the upload.'
            ),
            'bag_id' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => FALSE,
                'description' => 'Bag ID.'
            ),
            'exceptions' => array(
                'type' => 'varchar',
                'length' => 127,
                'not null' => FALSE,
                'default' => '',
                'description' => 'Exceptions.'
            ),
            'freeze_time' => array(
                'type' => 'int',
                'length' => 20,
                'not null' => FALSE,
                'description' => 'Data is located at freeze directory'
            ),
            'nfiles' => array(
                'type' => 'int',
                'length' => 20,
                'not null' => FALSE,
#                'default' => 0,
                'description' => 'Count of zipped files in freeze directory'
            ),
            'baginplace' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #               'default' => 0,
                'description' => 'Bag has been created for data'
            ),
            'zipped' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #              'default' => 0,
                'description' => 'Bag has been created for data'
            ),
            'bagged' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #             'default' => 0,
                'description' => 'Bag has been created for data'
            ),
            'foxml' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #            'default' => 0,
                'description' => 'FOXML has been created for data'
            ),
            'bag_ingested' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #           'default' => 0,
                'description' => 'Bag has been ingested'
            ),
            'data_purged' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #          'default' => 0,
                'description' => 'Uploaded data has been purged'
            ),
            'owner_added' => array(
                'type' => 'int',
                'pgsql_type' => 'boolean',
                'not null' => FALSE,
                #         'default' => 0,
                'description' => 'Notification has been unchecked'
            ),
            'date_bundle_ingest' => array(
                'type' => 'int',
                'not null' => FALSE,
                'description' => 'Date at which bundle was ingested'
            ),
            'note_unchecked' => array(
                'type' => 'int',
                'not null' => FALSE,
                'description' => 'Indicate whether status info should be shown'
            ),
            'language' => array(
                'description' => 'language of the displayed entity',
                'length' => 12,
                'type' => 'varchar',
                'not null' => TRUE,
                'default' => ''
            ),
        ),

        'unique keys' => array(
            'ukey' => array('user_id', 'bundle', 'collection'),
        ),
        'primary key' => array('uid'),
        'indexes' => array(
            'language' => array('language'),)

    );

    // Table keeping track of existing collections
    $schema['flat_deposit_ui_collection'] = array(
        'description' => 'Collection-member relation in FLAT.',
        'fields' => array(
            'collection_id'  => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => 'Unique ID of each member collection relation'
            ),
            'collection_name'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'Name of the collection'
            ),
            'member' => array(
                'type' => 'varchar',
                'length' => 63,
                'not null' => TRUE,
                'description' => 'Member of the collection.'
            ),
            'label'  => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'description' => 'label of the relation'
            ),
            'language' => array(
                'description' => 'language of the displayed entity',
                'length' => 12,
                'type' => 'varchar',
                'not null' => TRUE,
                'default' => ''
            ),
            'date_created' => array(
                'description' => 'Date when entry was created',
                'type' => 'int',
                'not null' => TRUE,
            ),
        ),

        'primary key' => array('collection_id'),
        'indexes' => array(
            'language' => array('language'),)
    );


    return $schema;
}


/**
 * Implements hook_uninstall().
 */
function flat_deposit_ui_uninstall(){
    $t = get_t();

    // clean up global variables
    variable_del('flat_deposit_paths');
    variable_del('flat_deposit_modules');
    variable_del('flat_deposit_names');
    variable_del('owncloud_settings');


    // Delete all flat_upload content type nodes
    $nids = db_select('node','n')
        ->fields('n', array('nid'))
        ->condition('type', array('flat_collection_name', 'flat_member', 'flat_bundle'), 'IN')
        ->execute()
        ->fetchCol();

    if (!empty ($nids)){
        node_delete_multiple($nids);
        drupal_set_message($t('Nodes containing Custom content types have been removed'));
    }


    //Remove all custom content type fields and field instances and clean up entries in field_config / field_config_instance tables
    field_attach_delete_bundle('node','flat_bundle');

    db_delete('field_config_instance')
        ->condition('deleted', 1)
        ->execute();

    field_purge_batch(1000);

    drupal_set_message($t('Custom field and field instances have been removed'));


    // Delete custom content type
    node_type_delete('flat_upload');
    drupal_set_message($t('Custom content type has been removed'));


    //Round up uninstall
    drupal_set_message($t('Deposit UI uninstalled'));
}

