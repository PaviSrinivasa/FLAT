<?php
/**
 * @file
 * Custom user interface for the FLAT data repository
 */

/*
 *  Load Dependencies
 */
require_once ('fedora_queries.php');
// require_once ('drupal_queries.php');
// require_once ('misc.php');


module_load_include('inc', 'flat_deposit_ui', 'Helpers/owncloud_api');

/*
 * Variable and constant definitions
 */

if ($GLOBALS['user']->uid){
    define('USER', $GLOBALS['user']->name);

    define('FREEZE_DIR', variable_get('flat_deposit_paths',array())['freeze']);
    define('BAG_DIR', variable_get('flat_deposit_paths',array())['bag']);

    define('USER_FREEZE_DIR', FREEZE_DIR . USER);
    define('USER_DRUPAL_DATA_DIR', 'public://users/' . USER );
    define('APACHE_USER', variable_get('flat_deposit_names',array())['apache_user']);
}

/**
 * Implements hook_help().
 * @param $path
 * @return string
 */

function flat_deposit_ui_help($path, $args){
    switch ($path){
        case 'admin/help#flat_deposit_ui':{
            $ret_val = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The FLAT deposit UI module is designed to manage the project data of each institutes employee') . '</p>';
            return $ret_val;
            break;
        }
    }

}

/**
 * Implements hook_permission().
 */
function flat_deposit_ui_permission()
{
    return array(
        'admin deposit module' => array(
            'title' => t('Administration of the deposit module'),
            'description' => t('All administrative tasks'),
            'restrict access' => TRUE),
        'use deposit module' => array(
            'title' => t('Usage of the deposit module'),
            'description' => t('Upload data to the FLAT deposit')));
}


/**
 * Implements hook_menu().
 */
function flat_deposit_ui_menu()
{
    $access=array('admin deposit module');

    $items = array();

    // Admin configuration group
    $items['admin/config/flat_deposit_ui'] = array(
        'title' => 'FLAT deposit UI',
        'description' => 'Administer FLAT deposit user interface',
        'access callback' => TRUE);

    // Admin configuration - Upload settings
    $items['admin/config/flat_deposit_ui/customize'] = array(
        'title' => 'Customize deposit settings',
        'description' => 'Administer FLAT deposit settings such as temporal storage folders and used plugins',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_admin_form'),
        'access arguments' => $access);

    // Admin configuration - Owncloud settings
    $items['admin/config/flat_deposit_ui/manage_owncloud'] = array(
        'title' => 'Administer owncloud',
        'description' => 'Administer owncloud root path and credentials',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_owncloud_form'),
        'access arguments' => $access);

    // Page for uploading data
    $items['workspace'] = array(
        'title' => 'Workspace',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_workspace_form'),
        'access arguments' => array('use deposit module'));

    // Page for ingested data
    $items['view'] = array(
        'title' => 'View archived data',
        'description' => 'Notification of data ingested to server',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_ingested_files',
        'access arguments' => array('use deposit module'));

    // Page for manage bundles
    $items['managebundles'] = array(
        'title' => 'Manage bundles',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_manage_bundles',
        'page arguments' => array(
            'content' => 'Under construction'),
        'access arguments' => array('use deposit module'));

    // Page for manage collections
    $items['managecollections'] = array(
        'title' => 'Manage Collections',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_collections',
        'page arguments' => array(
            'content' => 'Under construction'),
        'access arguments' => array('use deposit module'));

    // Page for commiting changes
    $items['commitchanges'] = array(
        'title' => 'Commit changes',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_commit_form'),
        'access arguments' => array('use deposit module'));


    // CMDI template selection form
    $items['cmdi/select/%/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_select_form',1,2,3),
        'access arguments' => array('use deposit module'));



    // Register form implementations
    $items['cmdi/create/%/%/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_create_form',1,2,3,4),
        'access arguments' => array('use deposit module'));


    return $items;
};


function flat_deposit_ui_cmdi_select_form($form, &$form_state){

    $bundle = $form_state['build_info']['args'][1];
    $collection = $form_state['build_info']['args'][2];

    $form = array();

    $form['select_template_fieldset'] = array(
        '#title' => t('Form Template Selection'),
        '#type' => 'fieldset',
        '#prefix' => '<div id="select-div">',
        '#suffix' => '</div>',
    );

    $form['select_template_fieldset']['cmdi_select'] = [
        '#type' => 'select',
        '#title' => t('Please select meta data template'),
        '#options' => [
            'session' => t('session'),
            'experiment' => t('experiment'),
            'minimal' => t('minimal'),
        ],
    ];

    $form['select_template_fieldset']['checkbox_ajax_trigger'] = array(
        '#title' => t('Fill template with saved meta data'),
        '#type' => 'checkbox',
        '#ajax' => array(
            'callback' => 'flat_deposit_ui_cmdi_select_ajax_callback',
            'wrapper' => 'select-div',
            'method' => 'replace',
            'effect' => 'fade',
        ),
    );

// The select_data_file field is only shown when checkbox_ajax_trigger is checked
    $checked = isset($form_state['values']['checkbox_ajax_trigger']) ? $form_state['values']['checkbox_ajax_trigger'] : 0 ;
    if ($checked) {


        // Search for available tempalte data files in a certain data directory (e.g. Templates). // In case data files are
        // a checkbox is added allowing to fill
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates/';
        $listing = array_diff(scandir($template_dir), array('..', '.'));
        $templates = [];
        $i = 0;

        #foreach ($listing as $f) {$templates[(string)$i] = substr($f, 0, -4);$i++;} #make list of de-suffixed names
        foreach ($listing as $f) {
            $sub = substr($f, 0, -4);
            $templates[$sub] = $sub;
        } #make list of de-suffixed names

        $form['select_template_fieldset']['select_data_file'] = array(
            '#type' => 'select',
            '#title' => t('Select a file containing meta data'),
            '#options' => $templates);

        if (!$templates) {
            drupal_set_message('No saved meta data are available', 'warning');
        }

    }

    $form ['data_cmdi_select']= array(
        '#type' => 'value',
        '#value' => array(
            'bundle' => $bundle,
            'collection' =>$collection));


    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Select'),
        '#submit' => array('flat_deposit_ui_cmdi_select_form_submit'),
        '#validate' => array('flat_deposit_ui_cmdi_select_form_validate'));

    return $form;
}

function flat_deposit_ui_cmdi_select_ajax_callback ($form, &$form_state)
{

    return $form['select_template_fieldset'];
}


function flat_deposit_ui_cmdi_select_form_validate($form, &$form_state){
    $bundle = $form_state['values']['data_cmdi_select']['bundle'];
    $template = $form_state['values']['cmdi_select'];

    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');
    $cmd = new CMDI_Handler($bundle, $template);

    if ($cmd->projectCmdiFileExists()) form_set_error ('ingest_error', t('CMDI file already exists at target location'));
    return $form;
}

function flat_deposit_ui_cmdi_select_form_submit($form, &$form_state){
    $bundle = $form_state['values']['data_cmdi_select']['bundle'];
    $collection = $form_state['values']['data_cmdi_select']['collection'];

    $template = $form_state['values']['cmdi_select'];

    if (isset($form_state['values']['select_data_file'])){
        $md = '/' . $form_state['values']['select_data_file'];
    } else {
        $md = "";
    }
    $form_state ['redirect'] = 'cmdi/create/' . $template . '/' . $bundle . '/' . $collection . $md;

}


/**
 * Template session form. Can be populated by saved meta data (md). This is done by filling form default_values with data from a saved php-array.

 * @param $extra string path variable extending the ordinary registered path which will be used as additional variable in functions' logic
 * @return array
 */
function flat_deposit_ui_cmdi_create_form($form, &$form_state,$extra){
    $bundle = $form_state['build_info']['args'][2];
    $collection = $form_state['build_info']['args'][3];
    $template = $form_state['build_info']['args'][1];

    // Validation of meta data file might be handy and could be included here
    if (isset($form_state['build_info']['args'][4])) {
       $file = $form_state['build_info']['args'][4];
        $md = include USER_DRUPAL_DATA_DIR . '/Templates/'. $file . '.php';

    } else {$md = NULL;
    };

    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');




    //$md = get_example_md($template); #uncomment to get example data

    

    // remove md for unfilled form
    $form = get_template_form($template, $bundle,$md);


    //add names of form fields to form
    $form['form_fields_template'] = array(
        '#type' => 'value',
        '#value' => array_keys($form));


    // add data fields and submit-button to template form
    $form ['data_template']= array(
        '#type' => 'value',
        '#value' => array('template' => $template,
            'bundle' => $bundle,
            'collection' =>$collection));


    $form['save_template'] = array(
        '#type' => 'checkbox',
        '#title' => t('Save input as template'),
        '#ajax' => array(
            'callback' => 'flat_deposit_ui_cmdi_save_form_ajax_callback',
            'wrapper' => 'input_field',
            'effect' => 'fade',
        ),
    );

    $form['input_field'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="input_field">',
        '#suffix' => '</div>',
    );

    // Since checkboxes return TRUE or FALSE, we have to check that
    // $form_state has been filled as well as what it contains.
    if (!empty($form_state['values']['save_template']) && $form_state['values']['save_template']) {
        $form['input_field']['template_name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name of template'),
        );

    }
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('flat_deposit_ui_cmdi_create_form_submit'),
        '#validate' => array('flat_deposit_ui_cmdi_create_form_validate'));

    return $form;
}


function flat_deposit_ui_cmdi_save_form_ajax_callback($form, $form_state)
{
    return $form['input_field'];
}


function flat_deposit_ui_cmdi_create_form_validate($form, &$form_state){

// Checks for saving the templates
    if ($form_state['values']['save_template']){

        // Can directory be created?
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates';
        if (!file_exists($template_dir)) { drupal_mkdir($template_dir);}

        if (!file_exists($template_dir)) {
            form_set_error ('cmdi_error', "Couldn't create directory for saving templates. Please contact administator");
            return $form;
        }

        // Is template directory owned by apache_user and writable
        $owner = posix_getpwuid(fileowner($template_dir));
        if ($owner['name'] != APACHE_USER) {
            form_set_error ('cmdi_error', "Template directory is not writable by application. Please contact administator");
            return $form;
        }

        // Is template directory name a valid name ?
        $template_name = $form_state['values']['template_name'];
        if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $template_name)) {
            form_set_error ('cmdi_error', "The name of template directory may contain letters, numbers and underscores (max length 40 characters)");
            return $form;
        }
        if (file_exists( $template_dir . '/' . $template_name . '.php')) {
            form_set_error ('cmdi_error', "A template file with entered name already exists");
            return $form;
        }

    }

    return $form;

}

function flat_deposit_ui_cmdi_create_form_submit($form, &$form_state){
    $template = $form_state['values']['data_template']['template'];
    $bundle = $form_state['values']['data_template']['bundle'];
    $collection = $form_state['values']['data_template']['collection'];

    $data = array();
    foreach ($form_state['values']['form_fields_template'] as $field) {$data[$field] = $form_state['values'][$field];}

    // Save data as template if checked
    if ($form_state['values']['save_template']) {
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates';
        $template_name = $form_state['values']['template_name'];

        file_put_contents( $template_dir . '/' . $template_name . '.php' , '<?php return '.var_export( $data, true ).";\n" );

    }

    
    
    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');
    $cmd = new CMDI_Handler($bundle, $template);
    $cmd->getXML();

    $cmd->getHandle();
    $cmd->changeHeader();

    // ToDo : At the moment, handles need to be known before ingest. Therefore, we only can create meta data for existing test data sets.
    // ToDo: Implement Handle assignment and CMDI alteration (adding resources) as action during ingest, maybe part of dporkeeper
    $cmd->addIngestFileInfoToXml();

    
    $cmd->processFormData($form_state['values']);
    
    $cmd->addComponentInfoToXml();

    //saving generated xml file;
    $result = $cmd->xml->asXML($cmd->export_file);

    $form_state['redirect'] ='commitchanges';
    drupal_set_message(t('Created metadata file from template ' . $template));

}





function flat_deposit_ui_admin_form($node, &$form_state)
{
    $form = array();

    $form['overview'] = array(
        '#markup' => t('This interface allows administrators to customize the deposit\'s settings'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',);

    $form['paths'] = array(
        '#type' => 'fieldset',
        '#title' => t('Paths'));

    $form['paths']['freeze'] = array (
        '#type' => 'textfield',
        '#title' => 'Freeze',
        '#description' => t('Absolute path of the location where frozen data will be stored'),
        '#default_value' => FREEZE_DIR,
        '#required' => TRUE,);

    $form['paths']['bags'] = array (
        '#type' => 'textfield',
        '#title' => 'Bags',
        '#description' => t('Absolute path of the location where Fedora can needs to search for complete SIP\'s that will be ingested'),
        '#default_value' => BAG_DIR,
        '#required' => TRUE,);

    $form['modules'] = array(
        '#type' => 'fieldset',
        '#title' => t('Modules'));

    $form['modules']['owncloud'] = array (
        '#title' => t('Owncloud'),
        '#description' => t('Incorporate owncloud into module'),
        '#type' => 'checkbox',
        '#default_value' => variable_get('flat_deposit_modules',array())['owncloud'],);

    $form['names']['apache_user'] = array (
        '#type' => 'textfield',
        '#title' => 'Apache User',
        '#description' => t('Name of the apache user (e.g. www-data, www-)'),
        '#default_value' => APACHE_USER,
        '#required' => TRUE,);

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'));

    $form['restore'] = array (
        '#type' => 'submit',
        '#value' => t('Reset to defaults'),
        '#submit' => array('flat_deposit_ui_admin_form_reset_submit'));

    return $form;
}

function flat_deposit_ui_admin_form_submit ($form, &$form_state)
{
    variable_set('flat_deposit_paths', array(
        'freeze' => $form_state['values']['freeze'],
        'bag'=> $form_state['values']['bags']));

    variable_set('flat_deposit_modules', array(
        'owncloud' =>$form_state['values']['owncloud']));

    drupal_set_message(t('Changed values have been saved'));
}

function flat_deposit_ui_admin_form_reset_submit ($form, &$form_state){
    module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    flat_deposit_set_paths();
    flat_deposit_set_modules();
    flat_deposit_set_owncloud();
    drupal_set_message(t('All settings have been reset to default'));
}


/**
 * Implements hook_form().
 */
function flat_deposit_ui_owncloud_form($node, &$form_state)
{
    $form = array();

    $form['overview'] = array(
        '#markup' => t('Administrators can configure here owncloud settings. It is required that owncloud runs on the same server as this drupal installation'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',);

    $form['settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Owncloud settings'));

    $form['settings']['admin_name'] = array (
        '#type' => 'textfield',
        '#title' => 'Owncloud admin name',
        '#description' => t('The owncloud admin user name'),
        '#default_value' => variable_get('owncloud_settings',array())['admin_name'],
        '#required' => TRUE,);

    $form['settings']['admin_pass'] = array (
        '#type' => 'password',
        '#title' => 'Owncloud admin password',
        '#description' => t('The owncloud admin user password'),
        '#default_value' => variable_get('owncloud_settings',array())['admin_pass'],
        '#required' => TRUE,);

    $form['settings']['root_dir'] = array (
        '#type' => 'textfield',
        '#title' => 'Owncloud root directory',
        '#description' => t('The owncloud installation path'),
        '#default_value' => variable_get('owncloud_settings',array())['root_dir'],
        '#required' => TRUE,);

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'));

    $form['restore'] = array (
        '#type' => 'submit',
        '#value' => t('Reset to defaults'),
        '#submit' => array('flat_deposit_ui_admin_form_reset_submit'));


    #return $form;
}


function flat_deposit_ui_owncloud_form_submit ($form, &$form_state)
{
    variable_set('owncloud_settings', array(
        'admin_name' => $form_state['values']['admin_name'],
        'admin_pass' => $form_state['values']['admin_pass'],
        'root_dir'=> $form_state['values']['root_dir']));

    drupal_set_message(t('Changed values have been saved'));
}

function flat_deposit_ui_owncloud_form_reset_submit ($form, &$form_state){
    module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    flat_deposit_set_owncloud();
    drupal_set_message(t('Owncloud settings have been reset to default'));
}


/**
 * Implements hook_block_info().
 */
function flat_deposit_ui_block_info()
{
    $blocks = array();

    $blocks['flat_deposit_menu'] = array(
        'info' => t('FLAT Deposit Main Menu'),
        'status' => TRUE,
        'region' => 'sidebar_second',
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => 'islandora/*',

    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flat_deposit_ui_block_view($delta = '')
{
    if ($delta == 'flat_deposit_menu') {
        return array(
            'subject' => t('FLAT Deposit Main Menu'),
            'content' => flat_deposit_ui_menu_block_generate(),
        );

    }
}

// Implements flat deposit main menu block
function flat_deposit_ui_menu_block_generate(){
    // Build a render array.

    $output = array(
        'link_workspace' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/workspace" title="My Workspace"><img title="My Workspace" alt="My Workspace" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Upload.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/workspace">My Workspace</a><br/></div>'),
        'link_view' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/view" title="View uploads"><img title="View uploads" alt="View uploads" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/View.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/view">View uploads</a><br/></div>'),
        'link_manage_bundles' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/managebundles/" title="Manage bundles"><img title="Manage bundles" alt="Manage bundles" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/managebundles">Manage bundles</a><br/></div>'),
        'link_manage_collections' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/managecollections" title="Manage collections"><img title="Manage collections" alt="Manage collections" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage_coll.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/managecollections">Manage collections</a><br/></div>'),
        'link_commit' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/drupal/commitchanges" title="Commit changes"><img title="Commit changes" alt="Commit changes" src="/drupal/'.drupal_get_path('module','flat_deposit_ui').'/Images/Commit.png"/></a><br/>',
            '#suffix' => '<a href="/drupal/commitchanges">Commit changes</a><br/></div>'),
    );
    return $output;
}


/**
 * Implements hook_form
 * @return string to be displayed on the page
 */
function flat_deposit_ui_workspace_form($form, &$form_state)
{

    // initiate user directories if necessary
    module_load_include('inc', 'imce', 'inc/imce.page');
    global $user;
    imce_initiate_profile ($user);

    #$my_code = 'window.open(\'imce\', \'windowName\', \'width=640, height=480\');';

    // Define the workspace form
    $form['field_1'] = array(
        '#type' => 'fieldset',
        '#title' => t('Create bundles'),
        '#description' => t('Here you can create new bundles. Keep in mind that new bundles need to have unique names.'));

    $form ['field_1'] ['bundle_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name of bundle'));

    $form ['field_1'] ['collection_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Belongs to collection'));

    $form ['field_1']['init_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Click to create new workspace bundle'),
        '#submit' => array('flat_deposit_ui_workspace_bundle_init_submit'),
        '#validate' => array('flat_deposit_ui_workspace_bundle_init_validate'));


    $results = db_select('flat_deposit_ui_upload_log','p')
        ->fields('p',array('user_id', 'bundle', 'collection', 'status', 'exceptions', 'date_bundle_ingest'))
        ->condition('user_id', USER)
        ->condition('status', 'open')
        ->orderBy('collection')
        ->orderBy('bundle')
        ->execute();

    $open_bundles = array();

    foreach ($results as $entry) {
        $entry_as_array = json_decode(json_encode($entry), true);

        $open_bundles [] = $entry_as_array['bundle'];
    }


    $list_open_bundles = theme('item_list', array('items' => $open_bundles,
                                                    'title' => '',
                                                    'type' => 'ul',
                                                    'attributes' => array()));

    $form['field_2'] = array(
        '#type' => 'fieldset',
        '#title' => t('Open bundles'),
        '#description' => $list_open_bundles );





/*

 */

    $form['field_2']['upload_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Upload or browse data'),
        '#submit' => array('flat_deposit_ui_workspace_upload_submit'),);

    $form['field_3'] = array(
        '#type' => 'fieldset',
        '#title' => t('Other tasks'),
        );

    $form['field_3']['sync'] = array(
        '#type' => 'submit',
        '#value' => t('Sync owncloud'),
        '#description' => t('Owncloud needs to be synced with this workspace if data (other than metadata) is uploaded using the workspace explorer'),
        '#submit' => array('flat_deposit_ui_workspace_sync_submit'),);

    // Check for integrity with owncloud in case this features is selected
    $oc = new OwnCloud();
    if ($oc->ok){
        return $form;
    }
}

/**
 * Workspace form which allows to create new projects or browse data in file explorer
 * @param $form
 * @param $form_state
 */

function flat_deposit_ui_workspace_bundle_init_validate(&$form, &$form_state)
{
    $bundle_name = $form_state['values']['bundle_name'];

    $message = FALSE;

    $form_state['full_directory_path'] = USER_DRUPAL_DATA_DIR . '/' .  $bundle_name;

    //Check that the input values are of the proper format
    if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $bundle_name)) {
        $message = 'Allowed are all letters, numbers and underscores (max length 40)';}

    //Check that bundle name is distinctive from existing bundles
    else{
        $dirs = scandir(USER_DRUPAL_DATA_DIR);
        if (file_exists(USER_FREEZE_DIR)){ $dirs = array_merge($dirs, array_diff(scandir(USER_FREEZE_DIR), array('..', '.')));}

        foreach ($dirs as $dir){
            if (strtolower($dir)==strtolower($bundle_name)){$message = "Bundle with same or very similar bundle name exists";}
        };
    };
    //redirect to form in case error message is created
    if ($message) {form_set_error ('bundle_name', $message);}
}

/**
 * creates a new local folders on click
 */
function flat_deposit_ui_workspace_bundle_init_submit(&$form, &$form_state)
{
    drupal_set_message(t('Creating new upload folders'));

    $target = $form_state['full_directory_path'];
    drupal_mkdir($target);
    drupal_chmod($target, 0775);
    drupal_mkdir($target . '/metadata');
    drupal_mkdir($target . '/data');


    //create symbolic link in owncloud user directory and refresh to see new directory
    $oc = new OwnCloud();
    $bundle = $form_state['values']['bundle_name'];
    $oc->CreateLinkAndSync($target, $bundle);

    $collection = $form_state['values']['collection_name'];

    //Make entry on database (if not exists)
    module_load_include('inc', 'flat_deposit_ui' , '/inc/config');
    $config = get_initial_bundle_profile();
    $config['user_id'] = USER;
    $config['bundle'] = $bundle;
    $config['collection'] = $collection;
    $config['status'] = 'open';

    $result = db_select('flat_deposit_ui_upload_log', 'bundle')
        ->fields('bundle', array('bundle'))
        ->condition('user_id', USER)
        ->condition('bundle', $bundle)
        ->condition('collection', $collection)
        ->execute()
        ->rowCount();

    if ($result) {
        db_update('flat_deposit_ui_upload_log')
            ->fields(array('status' => 'open'))
            ->condition('user_id', USER)
            ->condition('bundle', $bundle)
            ->condition('collection', $collection)
            ->execute();
    } else {
        drupal_write_record('flat_deposit_ui_upload_log', $config);
    }
}

#
/**
 * $manage_bundles_form_submit
 */

function flat_deposit_ui_workspace_upload_submit(&$form, &$form_state)
{
    drupal_set_message(t('Do your uploads'));

    $options=array();
    $options['absolute'] = TRUE;

    $form_state ['redirect'] = 'user/' . $GLOBALS['user']->uid  . '/imce';
}


function flat_deposit_ui_workspace_sync_submit(&$form, &$form_state)
{
    $oc = new OwnCloud();
    $oc->UpdateUserFiles();
    drupal_set_message(t('Owncloud has been synced'));


}

/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_view_ingested_files() {

    $tuque = islandora_get_tuque_connection();

    $query = create_query_all_owned_files(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();
    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $var = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($var);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('File name'), t('Date ingested'),t('Direct link'));

    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Notification'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}


/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_view_collections()
{
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $tmp = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($tmp);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('Name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Projects'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}

/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_manage_bundles()
{
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $tmp = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($tmp);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('Name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Projects'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}

/**
 * Presents all user entries that are found in the log table and allows to further process them
 */
function flat_deposit_ui_commit_form($form, $form_state)
{
    $results = db_select('flat_deposit_ui_upload_log','p')
        ->fields('p',array('user_id', 'bundle', 'collection', 'status', 'exceptions', 'date_bundle_ingest'))
        ->condition('user_id', USER)
        ->orderBy('collection')
        ->orderBy('bundle')
        ->execute();

    $open_bundles = array();
    $frozen_bundles = array();
    $archived_bundles = array();
    $other_bundles = array();

    // make array of open / frozen bundles in order to use these in a form
    foreach ($results as $entry) {
        $entry_as_array = json_decode(json_encode($entry), true);
        if ($entry_as_array['status'] == 'open' && file_exists(USER_DRUPAL_DATA_DIR . '/' . $entry_as_array['bundle'])) {
            $open_bundles [] = $entry_as_array;
        } elseif ($entry_as_array['status'] == 'archived' ) {
            $archived_bundles [] = $entry_as_array;
        } elseif (file_exists(USER_FREEZE_DIR . '/' . $entry_as_array['bundle'])) {
            $frozen_bundles [] = $entry_as_array;
        } else {
            $entry_as_array['exceptions'] .= '; No files found in data directory';
            $other_bundles [] = $entry_as_array;
        }
    }


    // make form with three fields : 1) open bundles, 2) frozen bundles 3) additional (admin) tasks
    $form = array();

    //   open bundles field
    $form['open_bundles'] = array(
        '#type' => 'fieldset',
        '#title' => t('Open bundles'),);

    $header = array(
        'collection' => t('Collection Name'),
        'bundle' => t('Bundle Name'),
        'status' => t('Status'),
        'exceptions' => t('Exception'),
    );

    $open = array();
    foreach ($open_bundles as $key => $bundle) {
        $open[$key] = array(
            'collection' => $bundle['collection'],
            'bundle' => $bundle['bundle'],
            'status' => $bundle['status'],
            'exceptions' => $bundle['exceptions'],
        );
    }

    $form['open_bundles']['table_open_bundles'] = array (
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $open,
    );
    $form['open_bundles']['actions']['create_MD'] = array(
        '#type' => 'submit',
        '#value' => t('Create metadata file'),
        '#description' => t('Every bundle needs a cmdi meta data file '),
        '#submit' => array('flat_deposit_ui_commit_form_cmdi_select_submit'),
        );


    $form['open_bundles']['actions']['freeze'] = array(
        '#type' => 'submit',
        '#value' => t('Verify bundle'),
        '#submit' => array('flat_deposit_ui_commit_form_freeze_submit'),
        '#validate' => array('flat_deposit_ui_commit_form_freeze_validate'),);

    $form['open_bundles']['actions']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete bundle'),
        '#submit' => array('flat_deposit_ui_commit_form_delete_submit'));


    $form['open_bundles'] ['data_open_bundles']= array(
        '#type' => 'value',
        '#value' => $open_bundles);

    // frozen bundles field
    $form['frozen_bundles'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bundles ready to be archived'),);

    $header = array(
        'collection' => t('Collection Name'),
        'bundle' => t('Bundle Name'),
        'status' => t('Status'),
        'exceptions' => t('Exception'),
    );

    $frozen = array();
    foreach ($frozen_bundles as $key => $bundle) {
        $frozen[$key] = array(
            'collection' => $bundle['collection'],
            'bundle' => $bundle['bundle'],
            'status' => $bundle['status'],
            'exceptions' => $bundle['exceptions'],
        );
    }

    $form['frozen_bundles']['table_frozen_bundles'] = array (
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $frozen,
    );

    // Allow actions for frozen data: ingest or open up for changes
    $form['frozen_bundles']['actions']['unfreeze'] = array(
        '#type' => 'submit',
        '#value' => t('Unfreeze bundle'),
        '#submit' => array('flat_deposit_ui_commit_form_unfreeze_submit'),
        '#validate' => array('flat_deposit_ui_commit_form_unfreeze_validate'),);

    $form['frozen_bundles']['actions']['ingest'] = array(
        '#type' => 'submit',
        '#value' => t('Upload project to database'),
        '#submit' => array('flat_deposit_ui_commit_form_ingest_serve_submit'),
        '#validate' => array('flat_deposit_ui_commit_form_ingest_serve_validate'),);

    // if at least one entry contains the status 'failed' an admin may enter a debug mode
    $failed = array_search('failed', array_column($frozen_bundles,'status'));
    if (is_int($failed) && user_access('admin deposit module')){
        $form['frozen_bundles']['actions']['ingest_debug'] = array(
            '#type' => 'submit',
            '#value' => t('Upload project (debug)'),
            '#submit' => array('flat_deposit_ui_commit_form_ingest_serve_submit'));
        }

    $form['frozen_bundles']['data_frozen_bundles'] = array(
        '#type' => 'value',
        '#value' => $frozen_bundles);

    # Archived bundles field
    $form['archived_bundles'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bundles on database'),
    );

    $header = array(
        'collection' => t('Collection Name'),
        'bundle' => t('Bundle Name'),
        'status' => t('Status'),
        'date' => t('Bundle archived on'),
    );

    $archived = array();
    foreach ($archived_bundles as $key => $bundle) {
        $archived[$key] = array(
            'collection' => $bundle['collection'],
            'bundle' => $bundle['bundle'],
            'status' => $bundle['status'],
            'date' => format_date($bundle['date_bundle_ingest'])
        );
    }

    $form['archived_bundles']['table_archived_bundles'] = array (
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $archived,
    );

    if ($other_bundles){
        // other bundles field
        $form['other_bundles'] = array(
            '#type' => 'fieldset',
            '#title' => t('Bundles needing attention'),);

        $other = array();
        foreach ($other_bundles as $key => $bundle) {
            $other[$key] = array(
                'collection' => $bundle['collection'],
                'bundle' => $bundle['bundle'],
                'status' => $bundle['status'],
                'exceptions' => $bundle['exceptions'],
            );
        }
        $header = array(
            'collection' => t('Collection Name'),
            'bundle' => t('Bundle Name'),
            'status' => t('Status'),
            'exceptions' => t('Exception'),
        );

        $form['other_bundles']['table_other_bundles'] = array (
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $other,
        );
    }

    # other #
    $form['other'] = array(
        '#type' => 'fieldset',
        '#title' => t('Other tasks'),
    );
    // Add extra buttons for other tasks
    $form['other']['buttons']['refresh'] = array(
        '#type' => 'submit',
        '#value' => 'Refresh archived bundles',
        '#description' => 'Reinventarize bundles in archive',
        '#submit' => array('flat_deposit_ui_commit_form_refresh_archived_submit'),
    );



    return $form;
}

/**
 * creates cmdi meta data file for bundle
 */
function flat_deposit_ui_commit_form_cmdi_submit($form, &$form_state){
    foreach ($form_state['values']['table_open_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_open_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_open_bundles'][$key]['collection'];
            $form_state['redirect'] = 'cmdi/'. $bundle . '/'. $collection . '/create';}
        }
}


/**
 * creates cmdi meta data file for bundle
 */
function flat_deposit_ui_commit_form_cmdi_select_submit($form, &$form_state){
    foreach ($form_state['values']['table_open_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_open_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_open_bundles'][$key]['collection'];
            $form_state['redirect'] = 'cmdi/select/'. $bundle .'/'. $collection ;}
    }
}


/**
 * Performs general checks as accessibility of the user freeze directory by the apache_user, and bundle-wise sanity checks
 * @param $form
 * @param $form_state
 * @return mixed
 */
function flat_deposit_ui_commit_form_freeze_validate (&$form, &$form_state)
{

    // Check if freeze directory exists
    if (!file_exists(FREEZE_DIR)) {
        form_set_error ('freeze_error', "No freeze directory exists. Please contact administator");
        return $form;
    }

    // Check if freeze directory is owned by apache_user and writable
    $owner = posix_getpwuid(fileowner(FREEZE_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error ('freeze_error', "Freeze directory is not writable by application. Please contact administator");
        return $form;
    }

    // Check if user backend directory exists or can be created
    if (!file_exists(USER_FREEZE_DIR)) {
        $created = drupal_mkdir(USER_FREEZE_DIR, NULL, true);
        if (!$created) {
            form_set_error('freeze_error', "Could not create user backend directory. Please contact administator");
            return $form;
        }
    }

    // Sanity checks for each checked checkbox
    foreach ($form_state['values']['table_open_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_open_bundles'][$key]['bundle'];
            $frozen_bundle_dir = FREEZE_DIR . '/' . USER . '/' . $bundle;

            // Check if bundle directory on backend already exists
            if (file_exists($frozen_bundle_dir)) {
                form_set_error ('freeze_error', 'A bundle with the name ' . $bundle . ' has already been frozen.');
                return $form;
            }

            // Check if upload contains at least one cmdi file
            if (count(glob(drupal_realpath(USER_DRUPAL_DATA_DIR . '/' . $bundle . '/metadata/*.cmdi'))) != 1) {
                form_set_error('freeze_error', "No or too many meta data files available for upload bundle. Please provide exactly one .cmdi file");
                return $form;
            }

            // Checks on cmdi file
            $cmdi = glob(drupal_realpath(USER_DRUPAL_DATA_DIR) . '/' . $bundle . '/metadata/*cmdi')[0];

            $finfo = new finfo(FILEINFO_MIME, "/etc/magic");
            $mime = $finfo->file($cmdi);

            // Is cmdi a valid xml file?
            if (!strpos($mime, "/plain")) {
                form_set_error('freeze_error', "cmdi file is no valid xml file");
                return $form;}

            if (!simplexml_load_file($cmdi)) {
                form_set_error('freeze_error', "cmdi file is no valid xml file");
                return $form;}

            // Check if bundle name match up with bundle name as found in cmdi-file
            $content = json_decode(json_encode((array)simplexml_load_file($cmdi)), TRUE);
            if ($content['Components']['lat-session']['Name'] != $bundle){
                form_set_error('freeze_error', "cmdi file and bundle directory don't match. Please rename bundle");
                return $form;}

        }
    }
    return $form;
}



function flat_deposit_ui_commit_form_freeze_submit ($form, &$form_state)
{
    foreach ($form_state['values']['table_open_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_open_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_open_bundles'][$key]['collection'];
            $source = drupal_realpath(USER_DRUPAL_DATA_DIR . '/' . $bundle);
            $destination = USER_FREEZE_DIR . '/' . $bundle;
            $moved = rename($source, $destination);

            if ($moved) {
                // update database entry
                db_update('flat_deposit_ui_upload_log')
                    ->fields(array(
                        'freeze_time' => (int) $_SERVER['REQUEST_TIME'],
                        'exceptions' => '',
                        'status' => 'awaiting'))
                    ->condition('user_id', USER)
                    ->condition('bundle', $bundle)
                    ->condition('collection', $collection)
                    ->condition('status', 'open')
                    ->execute();

                //remove symbolic link in owncloud user directory
                $oc = new OwnCloud();
                $oc->DeleteLinkAndSync($bundle);
                drupal_set_message(t('Project ' . $bundle . ' is valid and can be archived'));
            }
        }
    }
}

function flat_deposit_ui_commit_form_delete_submit($form, &$form_state)
{
    foreach ($form_state['values']['table_open_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_open_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_open_bundles'][$key]['collection'];
            $source = USER_DRUPAL_DATA_DIR . '/' . $bundle;
            $del = file_unmanaged_delete_recursive($source);

            //#unlink owncloud symlink
            $oc = new OwnCloud();
            $oc->DeleteLinkAndSync($bundle);

            // Remove entry from flat_deposit_ui_upload_log

            $results = db_delete('flat_deposit_ui_upload_log')
                ->condition('user_id', USER)
                ->condition('bundle', $bundle)
                ->condition('collection', $collection)
                ->condition('status', 'open')
                ->execute();


            if ($del) {
                $message = t('Bundle ' . $bundle . ' has been deleted.');
            } else {
                $message = t('Bundle ' . $bundle . ' has not been deleted.');
            }

            if ($results) {
                $message .= t(' Database has been updated');
            } else {
                $message .= t(' Note: Database has not been updated');
            }
            drupal_set_message($message);

        }
    }
}



function flat_deposit_ui_commit_form_unfreeze_validate (&$form, &$form_state)
{

    // Check if user drupal data directory exists
    if (!file_exists(USER_DRUPAL_DATA_DIR)) {
        form_set_error ('unfreeze_error', "User Drupal data directory does not exist. Please contact administator");
        return $form;
    }

    // Check if backend is owned by www-data and writable
    $owner = posix_getpwuid(fileowner(USER_DRUPAL_DATA_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error ('unfreeze_error', "User Drupal data directory is not writable by application. Please contact administrator");
        return $form;
    }

    // Check if drupal data bundle directory already exists
    // for each checked box
    foreach ($form_state['values']['table_frozen_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_frozen_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_frozen_bundles'][$key]['collection'];

            $open_bundle_dir = USER_DRUPAL_DATA_DIR . '/' . $bundle ;

            // check if new open directory has been created in the mean time
            if (file_exists($open_bundle_dir)) {
                form_set_error ('unfreeze_error', 'A bundle with the name ' . $bundle . ' has already been frozen.');
                return $form;
            }

            $db_or = db_or();
            $db_or->condition('bundle.status', 'being processed' , '=');
            $db_or->condition('bundle.status', 'archived' , '=');

            $result = db_select('flat_deposit_ui_upload_log', 'bundle')
                ->fields('bundle', array('bundle'))
                ->condition('user_id', USER)
                ->condition('bundle', $bundle)
                ->condition('collection', $collection)
                ->condition($db_or)
                ->execute()
                ->rowCount();
            if ($result){
                form_set_error ('ingest_error', t('Bundle is already in process and cannot be unfrozen'));
            }
        }
    }

    return $form;
}


function flat_deposit_ui_commit_form_unfreeze_submit ($form, &$form_state)
{
    foreach ($form_state['values']['table_frozen_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_frozen_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_frozen_bundles'][$key]['collection'];
            $source = USER_FREEZE_DIR . '/' . $bundle;
            $destination = drupal_realpath(USER_DRUPAL_DATA_DIR . '/' . $bundle);
            $moved = rename($source, $destination);


            if ($moved) {
                // update database entry
                db_update('flat_deposit_ui_upload_log')
                    ->fields(array(
                        'status' => 'open',
                        'freeze_time' => 0))
                    ->condition('user_id', USER)
                    ->condition('bundle', $bundle)
                    ->condition('collection', $collection)
                    ->execute();


                //add symbolic link to owncloud user directory
                $oc = new OwnCloud();
                $oc->CreateLinkAndSync($destination, $bundle);

                drupal_set_message(t('Bundle ' . $bundle . ' is open and can be changed'));
            }
        }
    }
}


/**
 * Checks if bundle is already processed or erroneous
 *
 * @param drupal form $form
 * @param drupal form state $form_state
 * @return form
 */

function flat_deposit_ui_commit_form_ingest_serve_validate (&$form, &$form_state)
{

    foreach ($form_state['values']['table_frozen_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_frozen_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_frozen_bundles'][$key]['collection'];

            $result = db_select('flat_deposit_ui_upload_log', 'bundle')
                ->fields('bundle', array('bundle'))
                ->condition('user_id', USER)
                ->condition('bundle', $bundle)
                ->condition('collection', $collection)
                ->condition('status', 'awaiting')
                ->execute()
                ->rowCount();
            if (!$result){
                $message = 'Incorrect status. Bundle is either already in process or needs revision';
                form_set_error ('ingest_error', t($message));
            }

        }
    }

    return $form;
}


/**
 * Triggers a service that ingests specified bundles into the archive
 *
 * @param $form
 * @param $form_state
 *
 */

function flat_deposit_ui_commit_form_ingest_serve_submit ($form, &$form_state)
{

    foreach ($form_state['values']['table_frozen_bundles'] as $key => $checked) {
        if (!is_int($checked)) {

            // extract bundle name from form data
            $bundle = $form_state['values']['data_frozen_bundles'][$key]['bundle'];
            $collection = $form_state['values']['data_frozen_bundles'][$key]['collection'];

            // create array containing data needed by the ingest service
            module_load_include('inc','flat_deposit_ui','inc/config');
            $data_to_post = ingest_service_configuration();
            $data_to_post['freeze_dir'] = FREEZE_DIR;
            $data_to_post['bag_dir'] = BAG_DIR;
            $data_to_post['apache_user'] = APACHE_USER;
            $data_to_post['user_id'] = USER;
            $data_to_post['module_path'] = drupal_realpath(drupal_get_path('module','flat_deposit_ui'));
            $data_to_post['bundle'] = $bundle;
            $data_to_post['collection'] = $collection;

            // background service http request settings
            $options = array(
                'method' => 'POST',
                'data' => $data_to_post,
                'blocking' => FALSE,
                'headers' => array(
                    // Set the Host header to self.
                    'Host' => $_SERVER['HTTP_HOST'],),
            );

            $url = httprl_build_url_self(drupal_get_path('module', 'flat_deposit_ui') . "/Helpers/Ingest_service.php");


            // normal mode
            if ($form_state['values']['op'] == "Upload project to database") {
                httprl_request($url, $options);

                // Execute request.
                httprl_send_request();
            }

            // Debug mode
            if ($form_state['values']['op'] == "Upload project (debug)") {


                $url_debug = 'http://' . $_SERVER['SERVER_NAME'] . '/drupal/' . drupal_get_path('module', 'flat_deposit_ui') . "/Helpers/Ingest_service.php";
                $ch = curl_init();
                curl_setopt_array($ch, array(

                    CURLOPT_URL => $url_debug,
                    CURLOPT_COOKIE => "XDEBUG_SESSION=PHPSTORM",
                    CURLOPT_POST => sizeof($data_to_post),
                    CURLOPT_POSTFIELDS => $data_to_post));

                $result = curl_exec($ch);

                if($errno = curl_errno($ch)) {
                    $error_message = curl_strerror($errno);
                    echo "cURL error ({$errno}):\n {$error_message}";
                }
                curl_close($ch);
            }
        }
    }

    drupal_set_message('Frozen bundles are being archived');
}


/**
 * Removes user entries with status 'archived' from drupals' flat_deposit_ui_upload_log table and fills it with data from fedora commons
 * @param $form
 * @param $form_state
 */
function flat_deposit_ui_commit_form_refresh_archived_submit($form, &$form_state)
{
    // deletes entries
    $del = db_delete('flat_deposit_ui_upload_log')
        ->condition('user_id', USER)
        ->condition('status', 'archived')
        ->execute();

    // Fedora commons database actions
    $tuque = islandora_get_tuque_connection();
    $api_a = $tuque->repository->api->a;
    $condition = "ownerId=" . USER;
    $results = $api_a->findObjects('query',$condition);

    module_load_include('inc', 'flat_deposit_ui' , '/inc/config');

    foreach ($results['results'] as $result) {
        $pid = $result['pid'];
        if (preg_match('/_CMD/', $pid)) {
            //Make entry on database
            $pid_data = $api_a->getObjectProfile($pid);
            $config = get_initial_bundle_profile();
            $config['user_id'] = USER;
            $config['bundle'] = $pid_data['objLabel'];
            $config['pid_bundle'] = $pid;
            $config['collection'] = 'Sandbox';
            $config['status'] = 'archived';
            $config['date_bundle_ingest'] = strtotime($pid_data['objCreateDate']);

            drupal_write_record('flat_deposit_ui_upload_log', $config);

        }
    }


}

