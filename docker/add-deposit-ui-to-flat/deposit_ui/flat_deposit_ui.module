<?php
/**
 * @file
 * Custom user interface for the FLAT data repository
*/



// Initial variable definition and inclusion of dependencies if user turns out to be logged in.
if (module_exists('flat_deposit_ui')){
    if ($GLOBALS['user']->uid){

        //Variable and constant definitions
        define('USER', $GLOBALS['user']->name);

        define('FREEZE_DIR', variable_get('flat_deposit_paths',array())['freeze']);
        define('BAG_DIR', variable_get('flat_deposit_paths',array())['bag']);

        define('USER_FREEZE_DIR', FREEZE_DIR . USER);
        define('USER_DRUPAL_DATA_DIR', 'public://users/' . USER );
        define('APACHE_USER', variable_get('flat_deposit_names',array())['apache_user']);


        // Load Dependencies
        module_load_include('php', 'flat_deposit_ui', 'fedora_queries');
        module_load_include('php', 'flat_deposit_ui', 'drupal_queries');
        module_load_include('inc', 'flat_deposit_ui', 'Helpers/owncloud_api');

    }}


/**
 * Implements hook_help().
 * @param $path
 * @return string
 */

function flat_deposit_ui_help($path, $args){
    switch ($path){
        case 'admin/help#flat_deposit_ui':{
            $ret_val = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The FLAT deposit UI module is designed to manage the project data of each institutes employee') . '</p>';
            return $ret_val;
            break;
        }
    }
}


/**
 * Implements hook_permission().
 */
function flat_deposit_ui_permission()
{
    // setting up the right to use the deposit and to administer
    return array(
        'admin deposit module' => array(
            'title' => t('Administration of the deposit module'),
            'description' => t('All administrative tasks'),
            'restrict access' => TRUE),
        'use deposit module' => array(
            'title' => t('Usage of the deposit module'),
            'description' => t('Upload data to the FLAT deposit')));
}

/**
 * setup of initial configuration that is not already configured during install
 */
function flat_deposit_ui_enable(){

    // give authenticated users the right to use the deposit module
    user_role_change_permissions(DRUPAL_AUTHENTICATED_RID, array('use deposit module' => TRUE));

}

function flat_deposit_ui_node_info() {
    return array(
        'flat_bundle' => array(
            'name' => t('FLAT Upload bundle'),
            'base' => 'flat_bundle',
            'description' => t('A bundle of one or more data files upload entity'),
        )
    );
}


/**
 * Implements hook_form().
 */
function flat_bundle_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function flat_bundle_view($node, $view_mode) {

    $exception = field_get_items('node', $node, 'upload_exception')[0]['value'];
    if ($exception) {
        $node->content["upload_exception"] = field_view_field('node', $node, 'upload_exception');
    }

    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
        drupal_set_breadcrumb(array(
            l(t('Home'), NULL),
            l(t("!name's Uploads", array(
                '!name' => format_username($node))), 'bundle/' . $node->uid)));
    }


    return $node;
}



function flat_deposit_ui_entity_info() {
    $entities = array();

    $entities['collection'] = array(

        // Define basic information.
        'label' => t('Collection'),
        'plural label' => t('Collections'),
        'fieldable' => FALSE,

        // Provide information about the database table.
        'base table' => 'flat_deposit_ui_collection',
        'entity keys' => array(
            'id' => 'collection_id',
            'label' => 'label',

        ),

        // Use classes from the Entity API module.
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',

        // Have Entity API set up an administrative UI.
        'admin ui' => array(
            'path' => 'admin/collections',
        ),
        'module' => 'flat_deposit_ui',
        'access callback' => 'flat_deposit_ui_collection_access',

        // For content-type entities only, define the callback that
        // returns the URL for the entity.
        'uri callback' => 'flat_deposit_ui_collection_uri',
    );

    return $entities;
}


function collection_form($form, $form_state, $entity){

    $form = array();

    $form['collection_name'] = array(
        '#title' => t('Collection Name'),
        '#type' => 'textfield',
        '#default_value' => isset($entity->collection_name) ? $entity->collection_name : '',
        '#required' => TRUE);

    $form ['member'] = array(
        '#type' => 'textfield',
        '#title' => t('Member Name'),
        '#default_value' => isset($entity->member) ? $entity->member : '',
        '#required' => TRUE);

    $form['actions'] = array(
        '#type' => 'actions');

    $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('collection_form_submit'),
        '#weight' => 999,
    );

    // Let Field module handle the rest.
    field_attach_form('collection', $entity, $form, $form_state);

    return $form;
}

function collection_form_submit($form, &$form_state){

    #Add values for mandatory fields
    $form_state['values']['label'] = $form_state['values']['collection_name'] . '_' . $form_state['values']['member'];
    $form_state['values']['date_created'] = time();

    $entity = entity_ui_form_submit_build_entity($form, $form_state);
    $entity->save();

    // Redirect to the management page.
    $form_state['redirect'] = 'managecollections';

    #drupal_set_message(sprintf("%s is now member of collection %s ", $member,$collection));

}


function flat_deposit_ui_collection_page_title($entity){
    return $entity->collection_name;
}


// For content-type entities, return the URI for an entity.
function flat_deposit_ui_collection_uri($entity) {
    return array(
        'path' => 'collection/' . $entity->collection_id,
    );
}


/**
 * Access callback: Checks entity access.
 *
 * From "Defining an Entity Type in Drupal 7", chapter 4.
 *
 * @param string $op
 *   Operation to check: 'view', 'update', 'create', etc.
 * @param object|null $entity
 *   Object to check access on, or NULL to check for all entities.
 * @param object|null $account
 *   Account to check access permissions for. NULL means "current user".
 *
 * @return bool
 *   TRUE to allow access; FALSE to deny access.
 */
function flat_deposit_ui_collection_access($op, $entity, $account = NULL) {
    if ($op == 'view') {
        return user_access('view collection', $account);
    }

    // All other operations use the generic "administer" permission.
    return user_access('administer collection', $account);
}




/**
 * Implements hook_block_info().
 */
function flat_deposit_ui_block_info()
{
    $blocks = array();

    $blocks['flat_deposit_menu'] = array(
        'info' => t('FLAT Deposit Main Menu'),
        'status' => TRUE,
        'region' => 'sidebar_second',
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => 'islandora/*',

    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flat_deposit_ui_block_view($delta = '')
{
    if ($delta == 'flat_deposit_menu') {
        return array(
            'subject' => t('FLAT Deposit Main Menu'),
            'content' => flat_deposit_ui_menu_block_generate(),
        );

    }
}


// Implements flat deposit main menu block
function flat_deposit_ui_menu_block_generate(){
    // Build a render array.

    $output = array(
        'link_workspace' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/flat/workspace" title="My Workspace"><img title="My Workspace" alt="My Workspace" src="/flat/'.drupal_get_path('module','flat_deposit_ui').'/Images/Upload.png"/></a><br/>',
            '#suffix' => '<a href="/flat/workspace">My Workspace</a><br/></div>'),
        'link_view' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/flat/view" title="View uploads"><img title="View uploads" alt="View uploads" src="/flat/'.drupal_get_path('module','flat_deposit_ui').'/Images/View.png"/></a><br/>',
            '#suffix' => '<a href="/flat/view">View uploads</a><br/></div>'),
        'link_manage_bundles' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/flat/managebundles/" title="Manage bundles"><img title="Manage bundles" alt="Manage bundles" src="/flat/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage.png"/></a><br/>',
            '#suffix' => '<a href="/flat/managebundles">Manage bundles</a><br/></div>'),
        'link_manage_collections' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/flat/managecollections" title="Manage collections"><img title="Manage collections" alt="Manage collections" src="/flat/'.drupal_get_path('module','flat_deposit_ui').'/Images/Manage_coll.png"/></a><br/>',
            '#suffix' => '<a href="/flat/managecollections">Manage collections</a><br/></div>'),
        'link_commit' => array(
            '#type' => 'markup',
            '#prefix' => '<div>',
            '#markup' => '<a href="/flat/commitchanges" title="Commit changes"><img title="Commit changes" alt="Commit changes" src="/flat/'.drupal_get_path('module','flat_deposit_ui').'/Images/Commit.png"/></a><br/>',
            '#suffix' => '<a href="/flat/commitchanges">Commit changes</a><br/></div>'),
    );
    return $output;
}



/**
 * Implements hook_menu().
 */
function flat_deposit_ui_menu()
{
    $access=array('admin deposit module');

    $items = array();

    $items['bundle/%user_uid_optional'] = array(
        'title' => 'My uploads',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_bundle_page_user',
        'page arguments' => array(1),
        'access arguments' => array('use deposit module'),
        'file' => 'inc/flat_bundle.pages.inc',
    );

// CMDI template selection form
    $items['node/%node/cmdi_select'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_select_form',1),
        'access arguments' => array('use deposit module'));

    #"node/$node/cmdi/$template/$action" . $md;
    // Register form implementations
    $items['node/%node/cmdi/%/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_create_form',1,3,4),
        'access arguments' => array('use deposit module'));


    $items['collection/%entity_object'] = array(
        // entity_object_load() needs to know what the entity type is.
        'load arguments' => array('collection'),

        // Use a callback for the page title, not a static title.
        'title callback' => 'flat_deposit_ui_collection_page_title',
        'title arguments' => array(1),

        // Callback to display the entity.
        'page callback' => 'entity_ui_entity_page_view',
        'page arguments' => array(1),

        // Access callback.
        'access arguments' => $access,
    );

    // Admin configuration group
    $items['admin/config/flat_deposit_ui'] = array(
        'title' => 'FLAT deposit UI',
        'description' => 'Administer FLAT deposit user interface',
        'access callback' => TRUE);

    // Admin configuration - Upload settings
    $items['admin/config/flat_deposit_ui/customize'] = array(
        'title' => 'Customize deposit settings',
        'description' => 'Administer FLAT deposit settings such as temporal storage folders and used plugins',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_admin_form'),
        'access arguments' => $access);

    // Admin configuration - Owncloud settings
    $items['admin/config/flat_deposit_ui/manage_owncloud'] = array(
        'title' => 'Administer owncloud',
        'description' => 'Administer owncloud root path and credentials',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_owncloud_form'),
        'access arguments' => $access);

    // Page for uploading data
    $items['workspace'] = array(
        'title' => 'Workspace',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('use deposit module'));

    // Page for ingested data
    $items['view'] = array(
        'title' => 'View archived data',
        'description' => 'Notification of data ingested to server',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_ingested_files',
        'access arguments' => array('use deposit module'));

    // Page for manage bundles
    $items['managebundles'] = array(
        'title' => 'Manage bundles',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_manage_bundles',
        'page arguments' => array(
            'content' => 'Under construction'),
        'access arguments' => array('use deposit module'));

    // Page for manage collections
    $items['managecollections'] = array(
        'title' => 'Manage Collections',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('admin deposit module'));


    $items['managecollections/manage'] = array(
        'title' => 'Add Collections',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_add_collections_form'),
        'access arguments' => array('admin deposit module'));

    // Page for commiting changes
    $items['commitchanges'] = array(
        'title' => 'Commit changes',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_commit_changes',
        'page arguments' => array('Under construction'),
        'access arguments' => array('use deposit module'));


    return $items;
};


function flat_deposit_ui_commit_changes($arg) {return $arg;

}

function flat_deposit_ui_workspace($arg) {

    return $arg;
}



function flat_deposit_ui_admin_form($node, &$form_state)
{
    $form = array();

    $form['overview'] = array(
        '#markup' => t('This interface allows administrators to customize the deposit\'s settings'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',);

    $form['paths'] = array(
        '#type' => 'fieldset',
        '#title' => t('Paths'));

    $form['paths']['freeze'] = array (
        '#type' => 'textfield',
        '#title' => 'Freeze',
        '#description' => t('Absolute path of the location where frozen data will be stored'),
        '#default_value' => FREEZE_DIR,
        '#required' => TRUE,);

    $form['paths']['bags'] = array (
        '#type' => 'textfield',
        '#title' => 'Bags',
        '#description' => t('Absolute path of the location where Fedora can needs to search for complete SIP\'s that will be ingested'),
        '#default_value' => BAG_DIR,
        '#required' => TRUE,);

    $form['names']['apache_user'] = array (
        '#type' => 'textfield',
        '#title' => 'Apache User',
        '#description' => t('Name of the apache user (e.g. www-data, www-)'),
        '#default_value' => APACHE_USER,
        '#required' => TRUE,);

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'));

    $form['restore'] = array (
        '#type' => 'submit',
        '#value' => t('Reset to defaults'),
        '#submit' => array('flat_deposit_ui_admin_form_reset_submit'));

    return $form;
}

function flat_deposit_ui_admin_form_submit ($form, &$form_state)
{
    variable_set('flat_deposit_paths', array(
        'freeze' => $form_state['values']['freeze'],
        'bag'=> $form_state['values']['bags']));

    variable_set('flat_deposit_names', array(
        'apache_user' => $form_state['values']['apache_user'],));

    drupal_set_message(t('Changed values have been saved'));
}

function flat_deposit_ui_admin_form_reset_submit ($form, &$form_state){
    module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    flat_deposit_set_paths();
    flat_deposit_set_names();

    drupal_set_message(t('All settings have been reset to default'));
}


/**
 * Implements hook_form().
 */
function flat_deposit_ui_owncloud_form($node, &$form_state)
{
    $form = array();

    $form['overview'] = array(
        '#markup' => t('Administrators can configure here owncloud settings. It is required that owncloud runs on the same server as this drupal installation'),
        '#prefix' => '<p>',
        '#suffix' => '</p>',);

    $form['settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Owncloud settings'));


    $form['settings']['activated'] = array (
        '#title' => t('Use Owncloud'),
        '#description' => t('Allow incorporation of owncloud in module'),
        '#type' => 'checkbox',
        '#default_value' => variable_get('owncloud_settings',array())['activated'],
        '#required' => TRUE);


    $form['settings']['admin_name'] = array (
        '#type' => 'textfield',
        '#title' => 'Owncloud admin name',
        '#description' => t('The owncloud admin user name'),
        '#default_value' => variable_get('owncloud_settings',array())['admin_name'],
        '#required' => TRUE,);

    $form['settings']['admin_pass'] = array (
        '#type' => 'password',
        '#title' => 'Owncloud admin password',
        '#description' => t('The owncloud admin user password'),
        '#default_value' => variable_get('owncloud_settings',array())['admin_pass'],
        '#required' => TRUE,);

    $form['settings']['root_dir'] = array (
        '#type' => 'textfield',
        '#title' => 'Owncloud root directory',
        '#description' => t('The owncloud installation path'),
        '#default_value' => variable_get('owncloud_settings',array())['root_dir'],
        '#required' => TRUE,);

    $form['settings']['temp_dir'] = array (
        '#type' => 'textfield',
        '#title' => 'Owncloud temp directory',
        '#description' => t('Directory where owncloud can read/write temporary files (e.g. mount_user.json)'),
        '#default_value' => variable_get('owncloud_settings',array())['temp_dir'],
        '#required' => TRUE,);

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'));

    $form['restore'] = array (
        '#type' => 'submit',
        '#value' => t('Reset to defaults'),
        '#submit' => array('flat_deposit_ui_admin_form_reset_submit'));


    return $form;
}


function flat_deposit_ui_owncloud_form_submit ($form, &$form_state)
{
    variable_set('owncloud_settings', array(
        'activated' => $form_state['values']['activated'],
        'admin_name' => $form_state['values']['admin_name'],
        'admin_pass' => $form_state['values']['admin_pass'],
        'root_dir'=> $form_state['values']['root_dir'],
        'temp_dir'=> $form_state['values']['temp_dir']));

    drupal_set_message(t('Changed values have been saved'));
}

function flat_deposit_ui_owncloud_form_reset_submit ($form, &$form_state){
    flat_deposit_set_owncloud();
    drupal_set_message(t('Owncloud settings have been reset to default'));
}



/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_view_ingested_files() {

    $tuque = islandora_get_tuque_connection();

    $query = create_query_all_owned_files(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();
    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $var = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($var);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('File name'), t('Date ingested'),t('Direct link'));

    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Notification'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}

/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_manage_bundles()
{
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $tmp = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($tmp);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('Name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Projects'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}




function flat_deposit_ui_cmdi_select_form($form, &$form_state){

    $form = array();

    $form['select_template_fieldset'] = array(
        '#title' => t('Form Template Selection'),
        '#type' => 'fieldset',
        '#prefix' => '<div id="select-div">',
        '#suffix' => '</div>',
    );

    $form['select_template_fieldset']['cmdi_select'] = [
        '#type' => 'select',
        '#title' => t('Please select meta data template'),
        '#options' => [
            'session' => t('session'),
            'experiment' => t('experiment'),
            'minimal' => t('minimal'),
        ],
    ];

    $form['select_template_fieldset']['checkbox__trigger'] = array(
        '#title' => t('Fill template with saved meta data'),
        '#type' => 'checkbox',
        '#ajax' => array(
            'callback' => 'flat_deposit_ui_cmdi_select_ajax_callback',
            'wrapper' => 'select-div',
            'method' => 'replace',
            'effect' => 'fade',
        ),
    );

// The select_data_file field is only shown when checkbox_ajax_trigger is checked
    $checked = isset($form_state['values']['checkbox_ajax_trigger']) ? $form_state['values']['checkbox_ajax_trigger'] : 0 ;
    if ($checked) {


        // Search for available tempalte data files in a certain data directory (e.g. Templates). // In case data files are
        // a checkbox is added allowing to fill
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates/';
        $listing = array_diff(scandir($template_dir), array('..', '.'));
        $templates = [];

        #foreach ($listing as $f) {$templates[(string)$i] = substr($f, 0, -4);$i++;} #make list of de-suffixed names
        foreach ($listing as $f) {
            $sub = substr($f, 0, -4);
            $templates[$sub] = $sub;
        } #make list of de-suffixed names

        $form['select_template_fieldset']['select_data_file'] = array(
            '#type' => 'select',
            '#title' => t('Select a file containing meta data'),
            '#options' => $templates);

        if (!$templates) {
            drupal_set_message('No saved meta data are available', 'warning');
        }

    }

    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Select'),
        '#submit' => array('flat_deposit_ui_cmdi_select_form_submit'),
        '#validate' => array('flat_deposit_ui_cmdi_select_form_validate'));

    return $form;
}

function flat_deposit_ui_cmdi_select_ajax_callback ($form, &$form_state)
{

    return $form['select_template_fieldset'];
}


function flat_deposit_ui_cmdi_select_form_validate($form, &$form_state){
    $node = $form_state['build_info']['args'][0];
    $template = $form_state['values']['cmdi_select'];

    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');
    $cmd = new CMDI_Handler($node, $template);

    if ($cmd->projectCmdiFileExists()) form_set_error ('ingest_error', t('CMDI file already exists at target location'));
    return $form;
}


function flat_deposit_ui_cmdi_select_form_submit($form, &$form_state){
    $template = $form_state['values']['cmdi_select'];
    $node = $form_state['build_info']['args'][0];
    $action = ($form_state['build_info']['args'][1] == 'createandfreeze') ? $form_state['build_info']['args'][1] : 'createcmdi';

    if (isset($form_state['values']['select_data_file'])){
        $md = '/' . $form_state['values']['select_data_file'];
        $form_state ['redirect'] = "node/$node->nid/cmdi/$template/$action" . $md;
    } else {
        $form_state ['redirect'] = "node/$node->nid/cmdi/$template/$action";
    }


}


/**
 * Template session form. Can be populated by saved meta data (md). This is done by filling form default_values with data from a saved php-array.

 * @param $extra string path variable extending the ordinary registered path which will be used as additional variable in functions' logic
 * @return array
 */
function flat_deposit_ui_cmdi_create_form($form, &$form_state, $extra){
    $node = $form_state['build_info']['args'][0];
    $template = $form_state['build_info']['args'][1];

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];

    // Validation of meta data file might be handy and could be included here
    // todo check passing extra variable
    $extra = NULL;
    if (isset($extra)){
        $file = $form_state['build_info']['args'][4];
        $md = include USER_DRUPAL_DATA_DIR . '/Templates/'. $file . '.php';

    } else {$md = NULL;
    };

    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');

    $md = get_example_md($template); #uncomment to get example data

    // remove md for unfilled form
    $form = get_template_form($template, $bundle,$md);


    //add names of form fields to form
    $form['form_fields_template'] = array(
        '#type' => 'value',
        '#value' => array_keys($form));


    // add data fields and submit-button to template form
    $form ['data_template']= array(
        '#type' => 'value',
        '#value' => array('template' => $template,
            'bundle' => $bundle,
            'collection' =>$collection));


    $form['save_template'] = array(
        '#type' => 'checkbox',
        '#title' => t('Save input as template'),
        '#ajax' => array(
            'callback' => 'flat_deposit_ui_cmdi_save_form_ajax_callback',
            'wrapper' => 'input_field',
            'effect' => 'fade',
        ),
    );

    $form['input_field'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="input_field">',
        '#suffix' => '</div>',
    );

    // Since checkboxes return TRUE or FALSE, we have to check that
    // $form_state has been filled as well as what it contains.
    if (!empty($form_state['values']['save_template']) && $form_state['values']['save_template']) {
        $form['input_field']['template_name'] = array(
            '#type' => 'textfield',
            '#title' => t('Name of template'),
        );

    }
    $form['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('flat_deposit_ui_cmdi_create_form_submit'),
        '#validate' => array('flat_deposit_ui_cmdi_create_form_validate'));

    return $form;
}


function flat_deposit_ui_cmdi_save_form_ajax_callback($form, $form_state)
{
    return $form['input_field'];
}


function flat_deposit_ui_cmdi_create_form_validate($form, &$form_state){

// Checks for saving the templates
    if ($form_state['values']['save_template']){

        // Can directory be created?
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates';
        if (!file_exists($template_dir)) { drupal_mkdir($template_dir);}

        if (!file_exists($template_dir)) {
            form_set_error ('cmdi_error', "Couldn't create directory for saving templates. Please contact administator");
            return $form;
        }

        // Is template directory owned by apache_user and writable
        $owner = posix_getpwuid(fileowner($template_dir));
        if ($owner['name'] != APACHE_USER) {
            form_set_error ('cmdi_error', "Template directory is not writable by application. Please contact administator");
            return $form;
        }

        // Is template directory name a valid name ?
        $template_name = $form_state['values']['template_name'];
        if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $template_name)) {
            form_set_error ('cmdi_error', "The name of template directory may contain letters, numbers and underscores (max length 40 characters)");
            return $form;
        }
        if (file_exists( $template_dir . '/' . $template_name . '.php')) {
            form_set_error ('cmdi_error', "A template file with entered name already exists");
            return $form;
        }

    }

    return $form;

}

/**
 * On submission the form is optionally saved as template
 *
 */
function flat_deposit_ui_cmdi_create_form_submit($form, &$form_state){
    $node = $form_state['build_info']['args'][0];
    $template = $form_state['build_info']['args'][1];
    $action = $form_state['build_info']['args'][2];

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];


    $data = array();
    foreach ($form_state['values']['form_fields_template'] as $field) {$data[$field] = $form_state['values'][$field];}

    // Save data as template (if checked)
    if ($form_state['values']['save_template']) {
        $template_dir = USER_DRUPAL_DATA_DIR . '/Templates';
        $template_name = $form_state['values']['template_name'];

        file_put_contents( "$template_dir/$template_name.php", "<?php return ". var_export( $data, true ).";\n" );

    }

    // generate CMDI xml and save to disc
    module_load_include('php','flat_deposit_ui','Helpers/CMDI_Handler');
    $cmd = new CMDI_Handler($node, $template);

    # prepare xml
    $cmd->getXML();

    # fill/change xml object
    $cmd->changeHeader();
    $cmd->processFormData($form_state['values']);
    $cmd->addComponentInfoToXml();
    #$cmd->resources = $cmd->searchDir(USER_DRUPAL_DATA_DIR . "/$collection/$bundle");
    #$cmd->addResourcesToXml();


    $cmd->xml->asXML($cmd->export_file);

    $form_state['redirect'] ="node/$node->nid";
    drupal_set_message(t('Created metadata file from template ' . $template));


    // freeze directory in case this option is chosen
    if ($action == 'createandfreeze') {
        flat_bundle_freeze_bundle($node);
    }
}


/**
 * Implements hook_form_alter().
 *
 * shows debug information for every form
 */
function flat_deposit_ui_form_alter(&$form, &$form_state, $form_id)
{

    // for debug info uncomment dpm
    #dpm ($form_id);
    switch ($form_id){

        case "flat_bundle_node_form":{

            // Adapt general appearance
            $form['upload_status']['und']['#disabled'] = TRUE;
            hide($form['upload_exception']);
            hide($form['upload_cmdi']);
            hide($form['actions']['preview']);


            // Hide location where data is stored if external is unchecked
            /*
            $form['upload_external']['und']['#ajax'] =
                array(
                'callback' => 'flat_deposit_ui_external_select_ajax_callback',
                'wrapper' => 'upload-location-add-more-wrapper',
                'method' => 'replace',
                'effect' => 'fade',
            );
*/
            $form['upload_location']['#states'] = array(

                // Hide the settings when the cancel notify checkbox is disabled.
                'visible' => array(

                    ':input[name="upload_external[und]"]' => array('checked' => TRUE)));



            $checked = isset($form_state['values']['upload_external']['und'][0]['value']) ? $form_state['values']['upload_external']['und'][0]['value'] : 0 ;
            if (!$checked) {
                #'#states' => array(
                    #$form['upload_location']['#states']['visible'] => array(
                #hide($form['upload_location']);
            }else{
               # show($form['upload_location']);
                $a = 2;
            }


            // Add individual 'select' options to drop down menu
            $collections= db_select('flat_deposit_ui_collection','p')
                ->fields('p',array('collection_name','member'))
                ->condition('member', USER)
                ->orderBy('collection_name')
                ->execute()
                ->fetchCol();


            if (empty($collections)){$collections=['Dummy collection'];} // test data

            foreach ($collections as $index => $collection){
                $form ['upload_collection']['und']['#options'][$collection] =  $collection;
            }

            // Add field to save values
            $form['extra_values'] = array(
                '#type' => 'value',
                '#value' => array()
            );

            $node = $form_state['node'];



            // For new bundles
            // add validation
            if (!isset($node->nid) || isset($node->is_new)) {
                $form['#validate'][] = 'flat_bundle_add_node_form_validate';
                $form['#submit'][] = 'flat_bundle_add_node_form_submit';
            } else{
                // for existing bundles:
                // Add additional submit button to menu: (depending on status) freeze or unfreeze
                $status = field_get_items('node', $node, 'upload_status')[0]['value'];

                switch ($status){
                    case 'open':
                        $form['actions']['freeze'] = array(
                            '#type' => 'submit',
                            '#value' => 'Freeze',
                            '#name' => 'op',
                            '#submit' => array('flat_bundle_freeze_node_form_submit'),
                            '#validate' => array('flat_bundle_freeze_node_form_validate'),
                            '#weight' => 1000
                        );

                        # Add button to create meta data
                        $form['actions']['createCMDI'] = array(
                            '#type' => 'submit',
                            '#value' => 'Create meta data',
                            '#submit' => array('flat_bundle_creatmd_node_form_submit'),
                            '#name' => 'op',
                            '#weight' => 1000)
                        ;

                        # Add button to create meta data
                        $form['actions']['browse'] = array(
                            '#type' => 'submit',
                            '#value' => 'Browse data',
                            '#submit' => array('flat_bundle_browse_node_form_submit'),
                            '#name' => 'op',
                            '#weight' => 1000,
                            '#redirect' => 'user/' . USER  . '/imce');
                        ;

                        break;

                    case 'awaiting':

                        $form['actions']['archive'] = array(
                            '#type' => 'submit',
                            '#value' => 'Archive',
                            '#name' => 'op',
                            '#submit' => array('flat_bundle_archive_node_form_submit'),
                            '#weight' => 1000
                        );
                        $form['actions']['unfreeze'] = array(
                            '#type' => 'submit',
                            '#value' => 'Unfreeze',
                            '#name' => 'op',
                            '#submit' => array('flat_bundle_unfreeze_node_form_submit'),
                            '#weight' => 1000
                        );
                        break;


                    case 'failed':

                        if (USER == 'admin'){
                            $form['actions']['archive'] = array(
                                '#type' => 'submit',
                                '#value' => 'Archive (Debug)',
                                '#name' => 'op',
                                '#submit' => array('flat_bundle_archive_node_form_submit'),
                                '#weight' => 1000
                            );
                        }
                        $form['actions']['unfreeze'] = array(
                            '#type' => 'submit',
                            '#value' => 'Unfreeze',
                            '#name' => 'op',
                            '#submit' => array('flat_bundle_unfreeze_node_form_submit'),
                            '#weight' => 1000
                        );
                        break;
                }

                // Customized edit form validation and submission
                $form['#validate'][] = 'flat_bundle_edit_node_form_validate';
                $form['#submit'][] = 'flat_bundle_edit_node_form_submit';

                //Todo: add the possibility to change name collection /bundle
                $form['upload_collection']['und']['#disabled'] = TRUE;
                //when disabling a form field without default value, the associated field value is being removed from the node (might be a bug).
                //As workaround, add the assigned field value as default value
                $default_collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
                $form['upload_collection']['und']['#default_value'][] = $default_collection;
                $form['title']['#disabled'] = TRUE;
            }

            break;

        }
        case 'user_profile_form': {
            $use_owncloud = variable_get('owncloud_settings', array())['activated'];
            if ($use_owncloud) {
                $form['#validate'][] = 'flat_deposit_ui_user_profile_owncloud_validate';
                $form['#submit'][] = 'flat_deposit_ui_user_profile_owncloud_submit';
            }else{

                hide($form['upload_exception']);
            }
            break;
        }

    }

}

function flat_deposit_ui_external_select_ajax_callback ($form, &$form_state)
{

    return $form['upload_location'];
}




function flat_deposit_ui_user_profile_owncloud_validate (&$form, &$form_state)
{
    $oc = new OwnCloud();
    $oc->GetUserArchiveMount();
    if ($form_state['values']['mount_owncloud']['und'][0]['value'] === "1") {
        if ($oc->mounted) {
            $oc->UnmountUserArchiveMount();
        }

        // initiate user directories if necessary
        module_load_include('inc', 'imce', 'inc/imce.page');
        global $user;
        imce_initiate_profile ($user);

        $oc->MountDrupalDataFolder();
        $oc->GetUserArchiveMount();
        $oc->VerifyMount();
        if (!$oc->verified) {
            form_set_error('owncloud_mount', 'Owncloud mount cannot be verified.');
            return $form;
        }
    }
}

function flat_deposit_ui_user_profile_owncloud_submit (&$form, &$form_state){

    $oc = new OwnCloud();
    $oc->GetUserArchiveMount();

    if ($form_state['values']['mount_owncloud']['und'][0]['value'] === "0"){
        $oc->UnmountUserArchiveMount();
        drupal_set_message('Owncloud mount has been unmounted');
    } elseif ($form_state['values']['mount_owncloud']['und'][0]['value'] === "1"){
        drupal_set_message('Owncloud can be used to upload data to archive');
    }
}

function flat_bundle_validate($node, $form, &$form_state){
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $external = $node_wrapper->upload_external->value();
    $location = $node_wrapper->upload_location->value();
    if ($external AND !$location){
        form_set_error('flat_bundle','Location needs to be set when data is located on archive server');
    }


}


// custom node submission handler. Removes value of local storage path if bool external is set to 0.
function flat_deposit_ui_node_submit($node, $form, &$form_state){
    $type = $node->type ;
    switch ($type){
        case 'flat_bundle':
            $node_wrapper = entity_metadata_wrapper('node', $node);
            $external = $node_wrapper->upload_external->value();

            if (!$external){
                $node_wrapper->upload_location->set(NULL);
            }


            break;

    }

}

/**
 * Implements hook_delete().
 */
function flat_bundle_delete($node){

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
    $status = field_get_items('node', $node, 'upload_status')[0]['value'];
    $bundle_directory = drupal_realpath(USER_DRUPAL_DATA_DIR . "/$collection/$bundle");
    $collection_directory = drupal_realpath(USER_DRUPAL_DATA_DIR . "/$collection");
    $freeze_directory = USER_FREEZE_DIR . "/$collection/$bundle";
    $freeze_collection_directory = USER_FREEZE_DIR . "/$collection";

    module_load_include('php', 'flat_deposit_ui', 'inc/php_functions');


    // Routine for open projects
    if ($status == 'open'){
        // Remove files and directories from USER data directory
        if (file_exists($bundle_directory)){
            recursiveRmDir($bundle_directory);
            rmdir ($bundle_directory);}
        if (file_exists($collection_directory) && is_dir_empty($collection_directory))rmdir ($collection_directory);

        // remove owncloud link and directory
        $oc = new OwnCloud();
        if (!$oc->noErrors){drupal_set_message('owncloud',$oc->error_message);}
        #$oc->DeleteProjectSymlinkAndSync($collection, $bundle);
        #$oc->DeleteCollectionDirectoryAndSync($collection);
        $oc->UpdateUserFiles();
    }

    // Routine for frozen projects
    // Remove files and directories from FREEZE data directory
    if (file_exists($freeze_directory)){
        recursiveRmDir($freeze_directory);
        rmdir ($freeze_directory);}
    if (file_exists($freeze_collection_directory) && is_dir_empty($freeze_collection_directory))rmdir ($freeze_collection_directory);

}

function flat_bundle_add_node_form_validate($form, &$form_state)
{
    #dpm ($form_state);
    $bundle_name = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];

    //Validate bundle name
    // no special characters
    if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $bundle_name)) {
        $message = 'Allowed are all letters, numbers and underscores (max length 40)';
        $field = 'upload_bundle';

        form_set_error($field, $message);
        return $form;
    }


    //Check that bundle name is distinctive from existing bundles
    $user_id = $GLOBALS['user']->uid = "1";
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'flat_bundle')
        ->propertyCondition('uid', $user_id)
        ->fieldCondition('upload_collection', 'value', $collection, '=');

    $result = $query->execute();
    $nids = array_keys($result['node']);
    $query = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('n.nid', $nids, 'IN');

    $results = $query->execute()->fetchAll();


    foreach ($results as $result){
        if (strtolower($result->title) == strtolower($bundle_name)) {
            $message = "Bundle with same or very similar bundle name exists";
            $field = 'bundle';
            form_set_error($field, $message);
            return $form;
        }
    }

    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){form_set_error('owncloud',$oc->error_message);}


    // Check if external location is accessible by drupal
    $external = $form_state['values']['upload_external']['und'][0]['value']; #wrapper can"t be used during initiation. If this doesn't work use node_presave
    if ($external){

        $error = flat_deposit_ui_external_location_error($form_state['values']['upload_location']['und'][0]['value']);
        if ($error){
            form_set_error('external location', $error);
            return $form;
        }
    }

    $form_state['values']['extra_values']['full_directory_path'] = USER_DRUPAL_DATA_DIR  . "/$collection/$bundle_name";


}


function flat_bundle_add_node_form_submit($form, &$form_state){

    $bundle = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];

    // initiate user directories if necessary
    module_load_include('inc', 'imce', 'inc/imce.page');
    global $user;
    imce_initiate_profile ($user);

    $external = $form_state['values']['upload_external']['und'][0]['value']; #wrapper can"t be used during initiation. If this doesn't work use node_presave
    if ($external) {
        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
        $config = get_configuration_ingest_service();

        $location = $form_state['values']['upload_location']['und'][0]['value'];
        $target = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $location;

    } else {

        // Create collection directory if not existing
        if (!file_exists(USER_DRUPAL_DATA_DIR . "/$collection")) {
            drupal_mkdir(USER_DRUPAL_DATA_DIR . "/$collection");
            drupal_set_message(t('Creating new collection folder'));
        }

        $target = $form_state['values']['extra_values']['full_directory_path'];

        // Create bundle directory
        drupal_mkdir($target);
        }

    // create subdirectories
    $subs = array('data', 'metadata');
    foreach ($subs as $sub ) {if (!file_exists($target . '/metadata')) drupal_mkdir($target . '/'.  $sub);};


    //Refresh owncloud user directory to see new data
    $oc = new OwnCloud();
    $oc->UpdateUserFiles();

}

function flat_bundle_edit_node_form_validate($form, &$form_state){


    // Add directory name to form_state
    #$form_state['values']['extra_values']['full_directory_path'] = USER_DRUPAL_DATA_DIR  . "/$collection/$bundle_name";

    #form_set_error('','Testing');
}



function flat_bundle_freeze_node_form_validate($form, &$form_state){

    // extract bundle and collection from form data
    $bundle = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];
    $frozen_bundle_dir = FREEZE_DIR . '/' . USER . "$collection/$bundle";

    // Check if freeze directory exists
    if (!file_exists(FREEZE_DIR)) {
        form_set_error ('freeze_error', "No freeze directory exists. Please contact administator");
        return $form;
    }

    // Check if freeze directory is owned by apache_user and writable
    $owner = posix_getpwuid(fileowner(FREEZE_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error ('freeze_error', "Freeze directory is not writable by application. Please contact administator");
        return $form;
    }

    // Check if user backend directory exists or can be created
    if (!file_exists(USER_FREEZE_DIR)) {
        $created = drupal_mkdir(USER_FREEZE_DIR, NULL, true);
        if (!$created) {
            form_set_error('freeze_error', "Could not create user backend directory. Please contact administator");
            return $form;
        }
    }

    // Check if bundle directory on backend already exists
    if (file_exists($frozen_bundle_dir)) {
        form_set_error ('freeze_error', 'A bundle with the name ' . $bundle . ' has already been frozen.');
        return $form;
    }


    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){
        form_set_error('owncloud',$oc->error_message);
        return $form;}


    // Check if external location is accessible by drupal
    $wrapper = entity_metadata_wrapper('node', $form_state["node"]);

    if ($wrapper->upload_external->value()){

        $error = flat_deposit_ui_external_location_error($wrapper->upload_location->value());
        if ($error){
            form_set_error('external location', $error);
            return $form;
        }

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
        $config = get_configuration_ingest_service();

        $alternate_full_path = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();
    }

    // In case upload folder contains one cmdi file, check if file a valid xml file?
    $cmdi_path = $wrapper->upload_external->value() ? $alternate_full_path : drupal_realpath( USER_DRUPAL_DATA_DIR . "/$collection/$bundle/");
    if (count(glob("$cmdi_path/metadata/*.cmdi")) == 1) {
        $cmdi = glob("$cmdi_path/metadata/*.cmdi")[0];

        $finfo = new finfo(FILEINFO_MIME, "/etc/magic");
        $mime = $finfo->file($cmdi);

        if (!strpos($mime, "/plain")) {
            form_set_error('freeze_error', "cmdi file is no valid xml file");
            return $form;
        }

        if (!simplexml_load_file($cmdi)) {
            form_set_error('freeze_error', "cmdi file is no valid xml file");
            return $form;
        }

        form_set_value($form['upload_cmdi'],array('und' => array(0 => array('value' => 1))), $form_state);
    }
}

/**
 *
 */
function flat_deposit_ui_external_location_error($location)
{
// Check if external location is accessible by drupal


    $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    $config = get_configuration_ingest_service();

    if (!is_writable($config['alternate_dir'])){
        $message =  sprintf('External root directory %s  does not exist or is not writable. Please contact administrator',$config["alternate_dir"]);
        return $message;
    };

    $alternate_full_path = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $location;

    if (!is_writable($alternate_full_path)){
        $message = sprintf('External user directory %s does not exist or is not writable.',$alternate_full_path);
        return $message;
    };

    return FALSE;
}


// Is called when no other node_form_submit is defined
function flat_bundle_creatmd_node_form_submit($form, &$form_state){

    $node = $form_state['node'];
    $form_state['redirect']= "node/$node->nid/cmdi_select/createandfreeze";
    //drupal_set_message("done");

}

// Is called when no other node_form_submit is defined
function flat_bundle_edit_node_form_submit($form, &$form_state){

    $node = $form_state['node'];
    drupal_set_message("done");

}



#if ($oc->noErrors){
function flat_bundle_freeze_node_form_submit($form, &$form_state){
    $has_cmdi = $form_state['values']['upload_cmdi']['und'][0]['value'];
    $node = $form_state['node'];
    if($has_cmdi){

        flat_bundle_freeze_bundle($node);
    } else {
        $form_state['redirect'] = "node/$node->nid/cmdi_select/createandfreeze" ;
    }

}

/**
 * Executes the freeze of a bundle. Freezing includes moving source data of the user directory (either drupal user data or external)
 * to a different target (i.e. freeze) location.
 * colection/bundle directory from drupal_data_user to backend
 *
 */
function flat_bundle_freeze_bundle($node){

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
    $target = USER_FREEZE_DIR . "/$collection/$bundle";

    // create collection sub-directory if needed
    $subdirectory = drupal_realpath(USER_FREEZE_DIR) . "/$collection/";
    if (!file_exists($subdirectory)){drupal_mkdir($subdirectory);}

    // define source depending on bundle characteristics
    $wrapper = entity_metadata_wrapper('node', $node);
    if ($wrapper->upload_external->value()){

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

        $config = get_configuration_ingest_service();
        $source = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

    } else{
        $source = drupal_realpath(USER_DRUPAL_DATA_DIR) . "/$collection/$bundle";
    }

    $moved = rename($source, $target);

    if ($moved) {
        // change value of status field and reset exceptions
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->upload_status->set('awaiting');
        $node_wrapper->upload_exception->set(NULL);
        $node_wrapper->save();



        //remove symbolic link in owncloud user directory
        $oc = new OwnCloud();
        $oc->UpdateUserFiles();
        drupal_set_message(t('Project ' . $bundle . ' is valid and can be archived'));
    }
}

function flat_bundle_unfreeze_node_form_validate (&$form, &$form_state)
{
    $node = $form_state['node'];
    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];

    $target_directory = USER_DRUPAL_DATA_DIR . '/' . "$collection/$bundle";

    // Check if user drupal data directory exists
    if (!file_exists(USER_DRUPAL_DATA_DIR)) {
        form_set_error('unfreeze_error', "User Drupal data directory does not exist. Please contact administator");
        return $form;
    }

    // Check if drupal data directory is owned by www-data and writable
    $owner = posix_getpwuid(fileowner(USER_DRUPAL_DATA_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error('unfreeze_error', "User Drupal data directory is not writable by application. Please contact administrator");
        return $form;
    }


    // check if new open directory has been created in the mean time
    if (file_exists($target_directory)) {
        form_set_error('unfreeze_error', "A folder with the name $bundle exists at user data directory.");
        return $form;
    }
    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){
        form_set_error('owncloud',$oc->error_message);
        return $form;}

    // Check if external location is accessible by drupal
    $wrapper = entity_metadata_wrapper('node', $form_state["node"]);

    $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

    if ($wrapper->upload_external->value()) {
        $config = get_configuration_ingest_service();

        if (!is_writable($config['alternate_dir'])) {
            form_set_error('external location', sprintf('External root directory %s  does not exist or is not writable. Please contact administrator', $config["alternate_dir"]));
            return $form;
        };

        $alternate_fullpath = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

        if (!is_writable($alternate_fullpath)) {
            form_set_error('external location', sprintf('External user directory %s does not exist or is not writable.', $alternate_fullpath));
            return $form;
        };
    }

}

function flat_bundle_unfreeze_node_form_submit ($form, &$form_state)
{

    //inserted
/*


    // define source depending on bundle characteristics
*/
    //end insert

    // extract bundle name from form data
    $node = $form_state['node'];
    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];

    $source = USER_FREEZE_DIR . "/$collection/$bundle";

    // define target location depending on bundle characteristics
    $wrapper = entity_metadata_wrapper('node', $node);
    if ($wrapper->upload_external->value()){

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

        $config = get_configuration_ingest_service();
        $target = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

    } else{
        $target = drupal_realpath(USER_DRUPAL_DATA_DIR) . "/$collection/$bundle";
    }


    $moved = rename($source, $target);

    if ($moved) {

        // remove collection sub-directory if it is otherwise empty
        module_load_include('php', 'flat_deposit_ui', 'inc/php_functions');
        $collection_directory = drupal_realpath(USER_FREEZE_DIR) . "/$collection/";
        if (is_dir_empty($collection_directory)){drupal_rmdir($collection_directory);}

        // change value of status field
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->upload_status->set('open');
        $node_wrapper->save();

        //add symbolic link to owncloud user directory
        $oc = new OwnCloud();
        #$oc->CreateCollectionDirectoryAndSync($collection);
        #$oc->CreateProjectSymlinkAndSync(USER_DRUPAL_DATA_DIR , $collection, $bundle);
        $oc->UpdateUserFiles();

        drupal_set_message(t('Bundle ' . $bundle . ' is open and can be changed'));
    }


}



function flat_bundle_browse_node_form_submit($form, &$form_state)
{
    drupal_set_message(t('Do your uploads'));

    $form_state ['redirect'] = 'user/' . $GLOBALS['user']->uid . '/imce';


}


/**
 * Triggers a service that ingests specified bundles into the archive
 *
 * @param $form
 * @param $form_state
 *
 */
function flat_bundle_archive_node_form_submit($form, &$form_state){

    $node = $form_state['node'];

    // create array containing data needed by the ingest service
    $data_to_post = array();
    $data_to_post['drupal_path'] = DRUPAL_ROOT;
    $data_to_post['nid'] = $node->nid;

    // background service http request settings
    $options = array(
        'method' => 'POST',
        'data' => $data_to_post,
        'blocking' => FALSE,
        'headers' => array(
            // Set the Host header to self.
            'Host' => $_SERVER['HTTP_HOST'],),
    );

    $url = httprl_build_url_self(drupal_get_path('module', 'flat_deposit_ui') . "/Helpers/Ingest_service.php");


    // normal mode
    if ($form_state['values']['op'] == "Archive") {
        httprl_request($url, $options);

        // Execute request.
        httprl_send_request();
    }

    // Debug mode
    if ($form_state['values']['op'] == "Archive (Debug)") {

        $url_debug = str_replace($_SERVER['SERVER_ADDR'], "localhost", $url);

        $ch = curl_init();
        curl_setopt_array($ch, array(

            CURLOPT_URL => $url_debug,
            CURLOPT_COOKIE => "XDEBUG_SESSION=PHPSTORM",
            CURLOPT_POST => sizeof($data_to_post),
            CURLOPT_POSTFIELDS => $data_to_post));

        $result = curl_exec($ch);

        if($errno = curl_errno($ch)) {
            $error_message = curl_strerror($errno);
            echo "cURL error ({$errno}):\n {$error_message}";
        }
        curl_close($ch);
    }

    $form_state['redirect'] = 'bundle/'. $GLOBALS['user']->uid;
    drupal_set_message('Frozen bundles are being archived');



}






/**
 * Implements hook_feeds_importer_default().
 */
function flat_deposit_ui_feeds_importer_default()
{

    $export = array();

    $feeds_importer = new stdClass();
    $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
    $feeds_importer->api_version = 1;
    $feeds_importer->id = 'example_uploads';
    $feeds_importer->config = array(
        'name' => 'Example_uploads',
        'description' => 'CSV Import of example upload bundles',
        'fetcher' => array(
            'plugin_key' => 'FeedsFileFetcher',
            'config' => array(
                'allowed_extensions' => 'txt csv tsv xml opml',
                'direct' => FALSE,
                'directory' => 'public://feeds',
                'allowed_schemes' => array(
                    0 => 'public',
                ),
            ),
        ),
        'parser' => array(
            'plugin_key' => 'FeedsCSVParser',
            'config' => array(
                'delimiter' => ',',
                'encoding' => 'UTF-8',
                'no_headers' => 0,
            ),
        ),
        'processor' => array(
            'plugin_key' => 'FeedsNodeProcessor',
            'config' => array(
                'expire' => '-1',
                'author' => 0,
                'authorize' => 1,
                'mappings' => array(
                    0 => array(
                        'source' => 'bundle',
                        'target' => 'title',
                        'unique' => 1,
                        'language' => 'und',
                    ),
                    1 => array(
                        'source' => 'collection',
                        'target' => 'upload_collection',
                        'unique' => FALSE,
                        'language' => 'und',
                    ),
                    2 => array(
                        'source' => 'status',
                        'target' => 'upload_status',
                        'unique' => FALSE,
                        'language' => 'und',
                    ),
                    3 => array(
                        'source' => 'user',
                        'target' => 'user_name',
                        'unique' => FALSE,
                    ),
                ),
                'insert_new' => '1',
                'update_existing' => '0',
                'update_non_existent' => 'skip',
                'input_format' => 'plain_text',
                'skip_hash_check' => 0,
                'bundle' => 'flat_bundle',
                'language' => 'und',
            ),
        ),
        'content_type' => '',
        'update' => 0,
        'import_period' => '-1',
        'expire_period' => 3600,
        'import_on_create' => 1,
        'process_in_background' => 0,
    );


    $export['example_uploads'] = $feeds_importer;

    return $export;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function flat_deposit_ui_ctools_plugin_api($module = '', $api = ''){

    if ($module == 'feeds' && $api == 'feeds_importer_default'){

        return array("version" => 1);

    }
}

