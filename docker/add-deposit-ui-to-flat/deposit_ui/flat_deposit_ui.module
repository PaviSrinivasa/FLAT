<?php
/**
 * @file
 * Custom user interface for the FLAT data repository
*/



// Initial variable definition and inclusion of dependencies if user turns out to be logged in.
if (module_exists('flat_deposit_ui')){
    if ($GLOBALS['user']->uid){

        //Variable and constant definitions
        define('USER', $GLOBALS['user']->name);

        define('FREEZE_DIR', variable_get('flat_deposit_paths',array())['freeze']);
        define('BAG_DIR', variable_get('flat_deposit_paths',array())['bag']);

        define('USER_FREEZE_DIR', FREEZE_DIR . USER);
        define('USER_DRUPAL_DATA_DIR', 'public://users/' . USER );
        define('APACHE_USER', variable_get('flat_deposit_names',array())['apache_user']);


        // Load Dependencies
        module_load_include('php', 'flat_deposit_ui', 'fedora_queries');
        module_load_include('php', 'flat_deposit_ui', 'drupal_queries');
        module_load_include('inc', 'flat_deposit_ui', 'Helpers/owncloud_api');

    }
}


/**
 * Implements hook_help().
 * @param $path
 * @return string
 */

function flat_deposit_ui_help($path, $args){
    switch ($path){
        case 'admin/help#flat_deposit_ui':{
            $ret_val = '<h3>' . t('About') . '</h3>';
            $ret_val .= '<p>' . t('The FLAT deposit UI module is designed to manage the project data of each institutes employee') . '</p>';
            return $ret_val;
            break;
        }
    }
}



/**
 * Implements hook_permission().
 */
function flat_deposit_ui_permission()
{
    // setting up the right to use the deposit and to administer
    return array(
        'admin deposit module' => array(
            'title' => t('Administration of the deposit module'),
            'description' => t('All administrative tasks'),
            'restrict access' => TRUE),
        'use deposit module' => array(
            'title' => t('Usage of the deposit module'),
            'description' => t('Upload data to the FLAT deposit')));
}

/**
 * setup of initial configuration that is not already configured during install
 */
function flat_deposit_ui_enable(){

    // give authenticated users the right to use the deposit module
    user_role_change_permissions(DRUPAL_AUTHENTICATED_RID, array('use deposit module' => TRUE));

}

function flat_deposit_ui_node_info() {
    return array(
        'flat_bundle' => array(
            'name' => t('FLAT Upload bundle'),
            'base' => 'flat_bundle',
            'description' => t('A bundle of one or more data files upload entity'),
        )
    );
}

/**
 * Implements hook_form().
 */
function flat_bundle_form($node, $form_state) {
    return node_content_form($node, $form_state);
}


/**
 * Implements hook_view().
 */
function flat_bundle_view($node, $view_mode) {


    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
        drupal_set_breadcrumb(array(
            l(t('Home'), NULL),
            l(t("!name's Uploads", array(
                '!name' => format_username($node))), 'bundle/' . $node->uid)));

        $exception = field_get_items('node', $node, 'upload_exception')[0]['value'];
        if ($exception) {
            $node->content["upload_exception"] = field_view_field('node', $node, 'upload_exception');
        }

        $status = field_get_items('node', $node, 'upload_status')[0]['value'];
        switch ($status){
            case 'open':{

                $name = 'open_bundle';
                break;
            }
            case 'awaiting':{

                $name = 'closed_bundle';
                break;

            }
            case 'failed':{
                $name = 'closed_bundle_failed';

                break;
            }
            case 'processing':{
                $name = 'process_bundle';

                break;
            }
        }

    #$image_name = closed_bundle.jpg
    $image_parameters = array(
        'path' => drupal_get_path('module','flat_deposit_ui').'/Images/' . $name . '.jpg',
        'width' => 100,
        'height' =>100,
        'alt' => t($node->title),
        'title' => t($node->title),

    );

    $node->content['icon'] = array(
        '#type' => 'markup',
        '#markup' => theme('image',$image_parameters),
        '#prefix' => '<div class="flat-bundle-image">',
        '#suffix' =>'</div>'
        );

    }
    #krumo($node);

    return $node;
}




function flat_deposit_ui_form_user_profile_form_alter(&$form, &$form_state, $form_id)
{
    // for debug info uncomment dpm
    #dpm ($form,'form');

    $use_owncloud = variable_get('owncloud_settings', array())['activated'];
    if ($use_owncloud) {

        $form['#validate'][] = 'flat_deposit_ui_user_profile_owncloud_validate';
        $form['#submit'][] = 'flat_deposit_ui_user_profile_owncloud_submit';
    } else {
        hide($form['mount_owncloud']);
    }
}





/**
 * Hide owncloud field if owncloud is not in use
 */
function flat_deposit_ui_user_view_alter(&$build)
{
    $use_owncloud = variable_get('owncloud_settings', array())['activated'];
    if (!$use_owncloud) {
        $build['mount_owncloud']['#access'] = FALSE;
    }

}



function flat_deposit_ui_user_profile_owncloud_validate (&$form, &$form_state)
{
    $original_value = $form['mount_owncloud']['und']['#default_value'];
    $entered_value = $form_state['values']['mount_owncloud']['und'][0]['value'];

    if ($original_value != $entered_value){

        if ($entered_value === "1") {
            $oc = new OwnCloud();

            // Unmount first if owncloud is set to available and it is already available
            $oc->GetUserMount();
            if ($oc->mounted) {
                $oc->UnmountUserMount();
            }

            // initiate user directories if necessary
            module_load_include('inc', 'imce', 'inc/imce.page');
            global $user;
            imce_initiate_profile ($user);

            // Mount and Verify Drupal folder
            $oc->MountDataFolder();
            $oc->GetUserMount();
            $oc->VerifyMount();
            if (!$oc->verified) {
                form_set_error('owncloud_mount', 'Owncloud mount cannot be verified.');
                return $form;
            }
        }
    }
}

function flat_deposit_ui_user_profile_owncloud_submit (&$form, &$form_state){

    $oc = new OwnCloud();
    $oc->GetUserMount();

    if ($form_state['values']['mount_owncloud']['und'][0]['value'] === "0"){
        $oc->UnmountUserMount();
        drupal_set_message('Owncloud mount has been unmounted');
    } elseif ($form_state['values']['mount_owncloud']['und'][0]['value'] === "1"){
        drupal_set_message('Owncloud can be used to upload data to archive');
    }
}





/**
 * Implements hook_block_info().
 */
function flat_deposit_ui_block_info()
{
    $blocks = array();

    $blocks['flat_deposit_menu'] = array(
        'info' => t('FLAT Deposit Main Menu'),
        'status' => TRUE,
        'region' => 'sidebar_second',
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => 'islandora/*',

    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flat_deposit_ui_block_view($delta = '')
{
    if ($delta == 'flat_deposit_menu') {
        return array(
            'subject' => t('FLAT Deposit Main Menu'),
            'content' => flat_deposit_ui_menu_block_generate(),
        );

    }
}


// Implements flat deposit main menu block
function flat_deposit_ui_menu_block_generate(){

    // Gather all info needed for image_link themes
    $image_links = array(
        'link_workspace' => array(
            'name' => 'My workspace',
            'href' => 'workspace',
            'image_path' => drupal_get_path('module','flat_deposit_ui') .'/Images/Upload.png',
        ),
        'link_view' => array(
            'name' => 'View Uploads',
            'href' => 'view',
            'image_path' => drupal_get_path('module','flat_deposit_ui') .'/Images/View.png',
        ),
        'link_manage_bundles' => array(
            'name' => 'Manage bundles',
            'href' => 'managebundles',
            'image_path' => drupal_get_path('module','flat_deposit_ui') .'/Images/Manage.png',
        ),
        'link_manage_collections' => array(
            'name' => 'Manage collections',
            'href' => 'manageusercollections',
            'image_path' => drupal_get_path('module','flat_deposit_ui') .'/Images/Manage_coll.png',
        ),
        'link_commit' => array(
            'name' => 'Commit changes',
            'href' => 'commitchanges',
            'image_path' => drupal_get_path('module','flat_deposit_ui') .'/Images/Commit.png',
        ),

    );

    $output = array();

    // Create complete variables to be sent to theme_image_link
    foreach ($image_links as $key => $image_link){

        $variables = array(
            'link' => array(
                'text' => $image_link ['name'],
                'path' => $image_link ['href'],
                'options' => array(
                    'attributes' => array(),
                    'html' => FALSE,),
            ),
            'image' => array(
                'path' => $image_link['image_path'],
                'alt' => $image_link ['name'],
                'title' => $image_link ['name'],
                'attributes' => array(),
            )
        );
        // Attach render array to array of outputted block items.
        $output [$key] = array(
            '#prefix' => '<div>',
            '#type' => 'markup',
            '#markup' => theme('image_link',$variables),
            '#suffix' => '</div>',
        );
    }
    return $output;
}



/**
 * Implements hook_menu().
 */
function flat_deposit_ui_menu()
{
    $access=array('admin' =>'admin deposit module',
        'user' => 'use deposit module');

    $items = array();

    $items['admin/reports/upload-list'] = array(
        'title' => 'List of existing upload bundles',
        'description' => t('A list of upload bundles .'),
        'page callback' => 'flat_deposit_ui_list_uploads',
        'file' => 'inc/flat_deposit.reports.inc',
        'access arguments' => array($access['admin']),
    );

    // CMDI template selection form
    $items['node/%node/cmdi_select'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_select_form',1),
        'file' => 'inc/flat_deposit.cmdi_select.inc',
        'access arguments' => array($access['user']));

    #"node/$node/cmdi/$template/$action" . $md;
    // Register form implementations
    $items['node/%node/cmdi/%/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_deposit_ui_cmdi_create_form',1,3,4),
        'file' => 'inc/flat_deposit.cmdi_select.inc',
        'access arguments' => array($access['admin']));

    $items['collection/%entity_object'] = array(
        // entity_object_load() needs to know what the entity type is.
        'load arguments' => array('flat_collection'),

        // Use a callback for the page title, not a static title.
        'title callback' => 'flat_deposit_ui_collection_page_title',
        'title arguments' => array(1),

        // Callback to display the entity.
        'page callback' => 'entity_ui_entity_page_view',
        'page arguments' => array(1),

        // Access callback.
        'access arguments' => array($access['user']),
    );

    // Admin configuration group
    $items['admin/config/flat_deposit_ui'] = array(
        'title' => 'FLAT deposit UI',
        'description' => 'Administer FLAT deposit user interface',
        'access callback' => TRUE);

    // Admin configuration - Upload settings
    $items['admin/config/flat_deposit_ui/customize'] = array(
        'title' => 'Customize deposit settings',
        'description' => 'Administer FLAT deposit settings such as temporal storage folders and used plugins',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_admin_form'),
        'file' => 'inc/flat_deposit.admin.inc',
        'access arguments' => array($access['admin']));

    // Admin configuration - Owncloud settings
    $items['admin/config/flat_deposit_ui/manage_owncloud'] = array(
        'title' => 'Administer owncloud',
        'description' => 'Administer owncloud root path and credentials',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'flat_deposit_ui_owncloud_form'),
        'file' => 'inc/flat_deposit_owncloud.admin_form.inc',
        'access arguments' => array($access['admin']));

    // Page for uploading data
    $items['workspace'] = array(
        'title' => 'Workspace',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array($access['user']));

    // Page for ingested data
    $items['view'] = array(
        'title' => 'View archived data',
        'description' => 'Notification of data ingested to server',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_view_ingested_files',
        'access arguments' => array($access['user']));

    // Page for manage bundles
    $items['managebundles'] = array(
        'title' => 'Manage bundles',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_manage_bundles',
        'page arguments' => array(
            'content' => 'Under construction'),
        'access arguments' => array($access['user']));

    // Page for manage collections
    $items['admin/collections/managecollections'] = array(
        'title' => 'Manage collections',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array($access['admin']));

    $items['manageusercollections'] = array(
        'title' => 'Manage user collections',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_manage_collections',
        'page arguments' => array('content' => 'Under construction'),
        'file' => 'inc/flat_deposit_owncloud.admin_form.inc',
        'access arguments' => array($access['user']));

    // Page for commiting changes
    $items['commitchanges'] = array(
        'title' => 'Commit changes',
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'flat_deposit_ui_commit_changes',
        'page arguments' => array('Under construction'),
        'access arguments' => array($access['user']));

    $items['islandora/object/%islandora_object/add_bundle'] = array(
        'title' => 'Add bundle',
        'page callback' => 'flat_deposit_ui_islandora_object_add_bundle',
        'page arguments' => array(2),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10,
        'access arguments' => array($access['user']),
        );

    return $items;
};





/**
 * Removes the 'Add bundle'-menu from every islandora object view if user is not member of the collection
 *
 */
function flat_deposit_ui_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
    if (isset($data['tabs'][0]['output'])){
        $tabs = $data['tabs'][0]['output'];
        foreach ($tabs as $index => $tab) {
            if ($tab['#link']['path'] == 'islandora/object/%/add_bundle') {
                $pid_parent = explode('/', $tab['#link']['tab_parent_href']);
                $pid_parent = end($pid_parent);

                $collections = query_user_collections(array( $pid_parent));

                if (empty($collections)) {
                    $data['tabs'][0]['output'][$index]['#link']['access'] = FALSE;
                    unset($data['tabs'][0]['output'][$index]);
                }
            }

        }
    }

    #krumo($data);
}

/**
 * Implements hook_theme().
 */
function flat_deposit_ui_theme() {
    return array(
        'image_link' => array(
            'variables' => array(
                'link' => array(
                    'text' =>'Link text',
                    'path' => 'path/to/ref',
                    'options' => array(
                        'attributes' => array(),
                        'html' => FALSE,
                    ),
                ),
                'image' => array(
                    'path' => $GLOBALS['base_url'] . '/sites/all/themes/flat_bootstrap_theme/favicon.ico',
                    'alt' => 'Image title',
                    'title' => 'image title',
                    'attributes' => array(),
                )
            )
        )
    );
}


/**
 * Theme function that translates our input into renderable HTML
 *
 * $param variables array of data to be rendered
 * @return string HTML code
 */
function theme_image_link($variables) {

    $title = check_plain($variables['link']['text']);
    $link = url($variables['link']['path']);

    $themed_image = theme_image($variables['image']);
    $themed_link = theme_link($variables['link']);

    $output = '<a href="' . $link . '" title="' . $title .'">' . $themed_image .'</a><br/>';
    $output .= $themed_link . '<br/>';

    return $output;
}


function flat_deposit_ui_workspace($arg) {

    return $arg;
}

function flat_deposit_ui_manage_collections($arg){
    $collections = query_user_collections();

    if (empty($collections)){

        return t('You are not member of any collection. Please request membership from corpus manager');}
        else {
            $output = array(
                'collections' => array(
                    '#theme' => 'table',
                    '#title' => 'You are member of these collections',
                    '#caption' => t('Collections'),
                    '#header' => array('Collection name', 'pid'),
                    '#rows' => $collections
                )
            );
            return $output;
        }
}



/**
 *
 * @param $pid
 * @return array|mixed|null|string
 */
function flat_deposit_ui_islandora_object_add_bundle ($pid){

    $collections = query_user_collections(array($pid->id),TRUE);

    if (empty($collections)){

        return t('You are not member of this collection and can"t create bundles here');
    } else {

        $collection = array('mycollection')
        module_load_include('inc', 'node', 'node.pages');
        $node_type = 'flat_bundle';
        $form_id = $node_type . '_node_form';

        global $user;
        $new_node = new stdClass();
        $new_node->uid = $GLOBALS['user']->uid;
        $new_node->name = USER;
        $new_node->type = $node_type;
        $new_node->language = 'und';
        $new_node->status = 1;
        $new_node->sticky = 0;
        $new_node->revision = FALSE;
        $new_node->promote = 1;
        $new_node->comment = 0;

        node_object_prepare($new_node);

        $collection = $collections ['collection_name'][0];
        $form = drupal_get_form($form_id,$new_node,$collection);
        return $form;

    }
}


function flat_deposit_ui_commit_changes($arg) {

    return $arg;
}


/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_view_ingested_files() {

    $tuque = islandora_get_tuque_connection();

    $query = create_query_all_owned_files(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();
    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $var = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($var);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('File name'), t('Date ingested'),t('Direct link'));

    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Notification'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}

/**
 * Gets a list of all data ingested
 */
function flat_deposit_ui_manage_bundles()
{
    $tuque = islandora_get_tuque_connection();

    $query = query_owned_collections(USER);

    $results = $tuque->repository->ri->sparqlQuery($query);

    $rows = array();

    foreach ($results as $result) {
        $pid = $result['pid']['value'];
        $label = $result['label']['value'];
        $createdDate = $result['created']['value'];

        $createdDate_formatted = format_date(strtotime($createdDate));

        $tmp = array(
            'theme' => 'link',
            'text' => 'click here',
            'path' => "islandora/object/$pid",
            'options' => array(
                'attributes' => array(),
                'html' => FALSE
            )
        );
        $link = theme_link($tmp);

        $row = array($label, $createdDate_formatted, $link) ;
        array_push($rows,$row);
    }

    // creating header array
    $header = array( t('Name'), t('Date ingested'),t('Direct link'));
    #islandora_object_load($object_id)
    $output = array(
        // Table, using the theme hook 'table'.
        'notification' => array(
            '#theme' => 'table',
            '#caption' => t('Projects'),
            '#header' => $header,
            '#rows' => $rows,
        ),
    );

    return $output;
}


function flat_deposit_ui_form_flat_bundle_node_form_alter(&$form, &$form_state, $form_id)
{
    // Adapt general appearance as e.g. hide unwanted buttons
    $form['upload_status']['und']['#disabled'] = TRUE;
    hide($form['upload_exception']);
    hide($form['upload_cmdi']);
    hide($form['actions']['preview']);

    // Adapt description of external location such that it contains the root of the external path
    module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    $config = get_configuration_ingest_service();
    $root = $config['alternate_dir'];
    $form['upload_location']['und'][0]['value']['#description'] .= " (specific folder name located in" . $root . USER . ")";

    // Hide location where data is stored if checkbox (external) is unchecked
    // Create ajax trigger out of checkbox
    $form['upload_external']['und']['#ajax'] = array(
        'callback' => 'select_external_trigger_ajax_callback',
        'wrapper' => 'upload-location-container',
        'method' => 'replace',
        'effect' => 'fade',
    );

    // assign wrapper to location container such that AJAX can update this part when triggered
    $form['upload_location']['#attributes']['id'] = array('upload-location-container');


    // set access value (show or not) depending on checkbox value
    $checked = isset($form_state['values']['upload_external']['und'][0]['value']) ? $form_state['values']['upload_external']['und'][0]['value'] : 0;
    if ($checked) {
        $access = TRUE;
    } else {
        $access = FALSE;
    }
    $form['upload_location']['und'][0]['value']['#access'] = $access;

    //Create selection of collections.
    //This is dependent from extra parameters. In case the name of a collection is provided only that specific collection can be used
    // Otherwise query collections user is member of
    $args = $form_state['build_info']['args'];

    if (isset($args[1])) {
        $collections[0]['collection_name'] = $args[1];
        $form['upload_collection']['und']['#default_value'] = array($collections[0]['collection_name']);
        $form['upload_collection']['und']['#disabled'] = TRUE;
    } else {
        $collections = query_user_collections(NULL);
    }

    foreach ($collections as $index => $collection) {
        $form ['upload_collection']['und']['#options'][$collection['collection_name']] = $collection['collection_name'];
    }

    // Add field to save values
    $form['extra_values'] = array(
        '#type' => 'value',
        '#value' => array()
    );

    $node = $form_state['node'];


    // For new bundle creation add custom validation
    if (!isset($node->nid) || isset($node->is_new)) {
        $form['#validate'][] = 'flat_bundle_add_node_form_validate';
        $form['#submit'][] = 'flat_bundle_add_node_form_submit';
    } else {
        // for existing bundles:
        // Add additional submit button to menu: (depending on status) freeze or unfreeze
        $status = field_get_items('node', $node, 'upload_status')[0]['value'];

        switch ($status){
            case 'open':
                $form['actions']['freeze'] = array(
                    '#type' => 'submit',
                    '#value' => 'Freeze',
                    '#name' => 'op',
                    '#submit' => array('flat_bundle_freeze_node_form_submit'),
                    '#validate' => array('flat_bundle_freeze_node_form_validate'),
                    '#weight' => 1000
                );

                # Add button to create meta data
                $form['actions']['createCMDI'] = array(
                    '#type' => 'submit',
                    '#value' => 'Create meta data',
                    '#submit' => array('flat_bundle_creatmd_node_form_submit'),
                    '#name' => 'op',
                    '#weight' => 1000)
                ;

                # Add button to create meta data
                $form['actions']['browse'] = array(
                    '#type' => 'submit',
                    '#value' => 'Browse data',
                    '#submit' => array('flat_bundle_browse_node_form_submit'),
                    '#name' => 'op',
                    '#weight' => 1000,
                    '#redirect' => 'user/' . USER  . '/imce');
                ;

                break;

            case 'awaiting':

                $form['actions']['archive'] = array(
                    '#type' => 'submit',
                    '#value' => 'Archive',
                    '#name' => 'op',
                    '#submit' => array('flat_bundle_archive_node_form_submit'),
                    '#weight' => 1000
                );
                $form['actions']['unfreeze'] = array(
                    '#type' => 'submit',
                    '#value' => 'Unfreeze',
                    '#name' => 'op',
                    '#submit' => array('flat_bundle_unfreeze_node_form_submit'),
                    '#weight' => 1000
                );
                break;


            case 'failed':

                if (USER == 'admin'){
                    $form['actions']['archive'] = array(
                        '#type' => 'submit',
                        '#value' => 'Archive (Debug)',
                        '#name' => 'op',
                        '#submit' => array('flat_bundle_archive_node_form_submit'),
                        '#weight' => 1000
                    );
                }
                $form['actions']['unfreeze'] = array(
                    '#type' => 'submit',
                    '#value' => 'Unfreeze',
                    '#name' => 'op',
                    '#submit' => array('flat_bundle_unfreeze_node_form_submit'),
                    '#weight' => 1000
                );
                break;
        }

        // Customized edit form validation and submission
        $form['#validate'][] = 'flat_bundle_edit_node_form_validate';
        $form['#submit'][] = 'flat_bundle_edit_node_form_submit';


        $form['upload_collection']['und']['#disabled'] = TRUE;
        #$form['upload_external']['und']['#disabled'] = TRUE;
        #$form['upload_location']['und']['#disabled'] = TRUE;

        //when disabling a form field without default value, the associated field value is being removed from the node (might be a bug).
        //As workaround, add the assigned field value as default value
        $default_collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
        $form['upload_collection']['und']['#default_value'][] = $default_collection;
        $form['title']['#disabled'] = TRUE;
    }

 #   krumo($form);
}

function select_external_trigger_ajax_callback ($form, &$form_state)
{
    return $form['upload_location'];
}



function flat_bundle_validate($node, $form, &$form_state){
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $external = $node_wrapper->upload_external->value();
    $location = $node_wrapper->upload_location->value();
    if ($external AND !$location){
        form_set_error('flat_bundle','Location needs to be set when data is located on archive server');
    }


}


// custom node submission handler. Removes value of local storage path if bool external is set to 0.
function flat_deposit_ui_node_submit($node, $form, &$form_state){
    $type = $node->type ;
    switch ($type){
        case 'flat_bundle':
            $node_wrapper = entity_metadata_wrapper('node', $node);
            $external = $node_wrapper->upload_external->value();

            if (!$external){
                $node_wrapper->upload_location->set(NULL);
            }


            break;

    }

}


/**
 * Implements hook_delete().
 */
function flat_bundle_delete($node){

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
    $status = field_get_items('node', $node, 'upload_status')[0]['value'];
    $bundle_directory = drupal_realpath(USER_DRUPAL_DATA_DIR . "/$collection/$bundle");
    $collection_directory = drupal_realpath(USER_DRUPAL_DATA_DIR . "/$collection");
    $freeze_directory = USER_FREEZE_DIR . "/$collection/$bundle";
    $freeze_collection_directory = USER_FREEZE_DIR . "/$collection";

    module_load_include('php', 'flat_deposit_ui', 'inc/php_functions');


    // Routine for open projects
    if ($status == 'open'){
        // Remove files and directories from USER data directory
        if (file_exists($bundle_directory)){
            recursiveRmDir($bundle_directory);
            rmdir ($bundle_directory);}
        if (file_exists($collection_directory) && is_dir_empty($collection_directory))rmdir ($collection_directory);

        // remove owncloud link and directory
        $oc = new OwnCloud();
        if (!$oc->noErrors){drupal_set_message('owncloud',$oc->error_message);}
        #$oc->DeleteProjectSymlinkAndSync($collection, $bundle);
        #$oc->DeleteCollectionDirectoryAndSync($collection);
        $oc->UpdateUserFiles();
    }

    // Routine for frozen projects
    // Remove files and directories from FREEZE data directory
    if (file_exists($freeze_directory)){
        recursiveRmDir($freeze_directory);
        rmdir ($freeze_directory);}
    if (file_exists($freeze_collection_directory) && is_dir_empty($freeze_collection_directory))rmdir ($freeze_collection_directory);

}

function flat_bundle_add_node_form_validate($form, &$form_state)
{
    #dpm ($form_state);
    $bundle_name = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];

    //Validate bundle name
    // no special characters
    if (!preg_match('/^[a-zA-Z0-9\_]{2,40}+$/', $bundle_name)) {
        $message = 'Allowed are all letters, numbers and underscores (max length 40)';
        $field = 'title';

        form_set_error($field, $message);
        return $form;
    }


    //Check that bundle name is distinctive from existing bundles. Therefore we need to query user nodes with the specified
    // upload_collection value of the new node
    $user_id = $GLOBALS['user']->uid = "1";
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'flat_bundle')
        ->propertyCondition('uid', $user_id)
        ->fieldCondition('upload_collection', 'value', "$collection", '=');

    $user_node_nids_in_collection = $query->execute();
    if (!empty($user_node_nids_in_collection)) {
        $nids = array_keys($user_node_nids_in_collection['node']);
        $query = db_select('node', 'n')
            ->fields('n', array('title'))
            ->condition('n.nid', $nids, 'IN');

        $user_nodes = $query->execute()->fetchAll();


        foreach ($user_nodes as $node){
            if (strtolower($node->title) == strtolower($bundle_name)) {
                $message = "Bundle with same or very similar bundle name exists";
                $field = 'bundle';
                form_set_error($field, $message);
                return $form;
            }
        }
    }
    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){form_set_error('owncloud',$oc->error_message);}


    // Check if external location is accessible by drupal
    $external = $form_state['values']['upload_external']['und'][0]['value']; #wrapper can"t be used during initiation. If this doesn't work use node_presave
    if ($external){

        $error = flat_deposit_ui_external_location_error($form_state['values']['upload_location']['und'][0]['value']);
        if ($error){
            form_set_error('external location', $error);
            return $form;
        }
    }

    $form_state['values']['extra_values']['full_directory_path'] = USER_DRUPAL_DATA_DIR  . "/$collection/$bundle_name";
#form_set_error('debug','debug');

}


function flat_bundle_add_node_form_submit($form, &$form_state){

    $bundle = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];

    // initiate user directories if necessary
    module_load_include('inc', 'imce', 'inc/imce.page');
    global $user;
    imce_initiate_profile ($user);

    $external = $form_state['values']['upload_external']['und'][0]['value']; #wrapper can"t be used during initiation. If this doesn't work use node_presave
    if ($external) {
        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
        $config = get_configuration_ingest_service();

        $location = $form_state['values']['upload_location']['und'][0]['value'];
        $target = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $location;

    } else {

        // Create collection directory if not existing
        if (!file_exists(USER_DRUPAL_DATA_DIR . "/$collection")) {
            drupal_mkdir(USER_DRUPAL_DATA_DIR . "/$collection" , NULL, TRUE);
            drupal_set_message(t('Creating new collection folder'));
        }

        $target = $form_state['values']['extra_values']['full_directory_path'];

        // Create bundle directory
        drupal_mkdir($target);
        }

    // create subdirectories
    $subs = array('data', 'metadata');
    foreach ($subs as $sub ) {if (!file_exists($target . '/metadata')) drupal_mkdir($target . '/'.  $sub);};


    //Refresh owncloud user directory to see new data
    $oc = new OwnCloud();
    $oc->UpdateUserFiles();


    //Warn if owncloud has not been activated
    $oc->WarnUserMount();


}

function flat_bundle_edit_node_form_validate($form, &$form_state){


    // Add directory name to form_state
    #$form_state['values']['extra_values']['full_directory_path'] = USER_DRUPAL_DATA_DIR  . "/$collection/$bundle_name";

    #form_set_error('','Testing');
}

// Is called when no other node_form_submit is defined
function flat_bundle_edit_node_form_submit($form, &$form_state){

    $node = $form_state['node'];
    drupal_set_message("done");

}




function flat_bundle_freeze_node_form_validate($form, &$form_state){

    // extract bundle and collection from form data
    $bundle = $form_state['values']['title'];
    $collection = $form_state['values']['upload_collection']['und'][0]['value'];
    $frozen_bundle_dir = FREEZE_DIR . '/' . USER . "$collection/$bundle";

    // Check if freeze directory exists
    if (!file_exists(FREEZE_DIR)) {
        form_set_error ('freeze_error', "No freeze directory exists. Please contact administator");
        return $form;
    }

    // Check if freeze directory is owned by apache_user and writable
    $owner = posix_getpwuid(fileowner(FREEZE_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error ('freeze_error', "Freeze directory is not writable by application. Please contact administator");
        return $form;
    }

    // Check if user backend directory exists or can be created
    if (!file_exists(USER_FREEZE_DIR)) {
        $created = drupal_mkdir(USER_FREEZE_DIR, NULL, true);
        if (!$created) {
            form_set_error('freeze_error', "Could not create user backend directory. Please contact administator");
            return $form;
        }
    }

    // Check if bundle directory on backend already exists
    if (file_exists($frozen_bundle_dir)) {
        form_set_error ('freeze_error', 'A bundle with the name ' . $bundle . ' has already been frozen.');
        return $form;
    }


    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){
        form_set_error('owncloud',$oc->error_message);
        return $form;}


    // Check if external location is accessible by drupal
    $wrapper = entity_metadata_wrapper('node', $form_state["node"]);

    if ($wrapper->upload_external->value()){

        $error = flat_deposit_ui_external_location_error($wrapper->upload_location->value());
        if ($error){
            form_set_error('external location', $error);
            return $form;
        }

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
        $config = get_configuration_ingest_service();

        $alternate_full_path = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();
    }

    // In case upload folder contains one cmdi file, check if file a valid xml file?
    $cmdi_path = $wrapper->upload_external->value() ? $alternate_full_path : drupal_realpath( USER_DRUPAL_DATA_DIR . "/$collection/$bundle/");
    if (count(glob("$cmdi_path/metadata/*.cmdi")) == 1) {
        $cmdi = glob("$cmdi_path/metadata/*.cmdi")[0];

        $finfo = new finfo(FILEINFO_MIME, "/etc/magic");
        $mime = $finfo->file($cmdi);

        if (!strpos($mime, "/plain")) {
            form_set_error('freeze_error', "cmdi file is no valid xml file");
            return $form;
        }

        if (!simplexml_load_file($cmdi)) {
            form_set_error('freeze_error', "cmdi file is no valid xml file");
            return $form;
        }

        form_set_value($form['upload_cmdi'],array('und' => array(0 => array('value' => 1))), $form_state);
    }


}




#if ($oc->noErrors){

function flat_bundle_freeze_node_form_submit($form, &$form_state){
    $has_cmdi = $form_state['values']['upload_cmdi']['und'][0]['value'];
    $node = $form_state['node'];
    if($has_cmdi){

        flat_bundle_freeze_bundle($node);
    } else {
        $form_state['redirect'] = "node/$node->nid/cmdi_select/createandfreeze" ;
    }

}

/**
 * Executes the freeze of a bundle. Freezing includes moving source data of the user directory (either drupal user data or external)
 * to a different target (i.e. freeze) location.
 * colection/bundle directory from drupal_data_user to backend
 *
 */
function flat_bundle_freeze_bundle($node){

    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];
    $target = USER_FREEZE_DIR . "/$collection/$bundle";

    // create collection sub-directory if needed
    $subdirectory = drupal_realpath(USER_FREEZE_DIR) . "/$collection/";
    if (!file_exists($subdirectory)){drupal_mkdir($subdirectory, NULL, TRUE);}

    // define source depending on bundle characteristics
    $wrapper = entity_metadata_wrapper('node', $node);
    if ($wrapper->upload_external->value()){

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

        $config = get_configuration_ingest_service();
        $source = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

    } else{
        $source = drupal_realpath(USER_DRUPAL_DATA_DIR) . "/$collection/$bundle";
    }

    $moved = rename($source, $target);

    if ($moved) {
        // change value of status field and reset exceptions
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->upload_status->set('awaiting');
        $node_wrapper->upload_exception->set(NULL);
        $node_wrapper->save();



        //remove symbolic link in owncloud user directory
        $oc = new OwnCloud();
        $oc->UpdateUserFiles();
        drupal_set_message(t('Project ' . $bundle . ' is valid and can be archived'));


    }
}

function flat_bundle_unfreeze_node_form_validate (&$form, &$form_state)
{
    $node = $form_state['node'];
    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];

    $target_directory = USER_DRUPAL_DATA_DIR . '/' . "$collection/$bundle";

    // Check if user drupal data directory exists
    if (!file_exists(USER_DRUPAL_DATA_DIR)) {
        form_set_error('unfreeze_error', "User Drupal data directory does not exist. Please contact administator");
        return $form;
    }

    // Check if drupal data directory is owned by www-data and writable
    $owner = posix_getpwuid(fileowner(USER_DRUPAL_DATA_DIR));
    if ($owner['name'] != APACHE_USER) {
        form_set_error('unfreeze_error', "User Drupal data directory is not writable by application. Please contact administrator");
        return $form;
    }


    // check if new open directory has been created in the mean time
    if (file_exists($target_directory)) {
        form_set_error('unfreeze_error', "A folder with the name $bundle exists at user data directory.");
        return $form;
    }
    // Check Owncloud availability and existence user account
    $oc = new OwnCloud();
    if (!$oc->noErrors){
        form_set_error('owncloud',$oc->error_message);
        return $form;}

    // Check if external location is accessible by drupal
    $wrapper = entity_metadata_wrapper('node', $form_state["node"]);

    $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

    if ($wrapper->upload_external->value()) {
        $config = get_configuration_ingest_service();

        if (!is_writable($config['alternate_dir'])) {
            form_set_error('external location', sprintf('External root directory %s  does not exist or is not writable. Please contact administrator', $config["alternate_dir"]));
            return $form;
        };

        $alternate_fullpath = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

        if (!is_writable($alternate_fullpath)) {
            form_set_error('external location', sprintf('External user directory %s does not exist or is not writable.', $alternate_fullpath));
            return $form;
        };
    }

}

function flat_bundle_unfreeze_node_form_submit ($form, &$form_state)
{

    //inserted
/*


    // define source depending on bundle characteristics
*/
    //end insert

    // extract bundle name from form data
    $node = $form_state['node'];
    $bundle = $node->title;
    $collection = field_get_items('node', $node, 'upload_collection')[0]['value'];

    $source = USER_FREEZE_DIR . "/$collection/$bundle";

    // define target location depending on bundle characteristics
    $wrapper = entity_metadata_wrapper('node', $node);
    if ($wrapper->upload_external->value()){

        $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');

        $config = get_configuration_ingest_service();
        $target = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $wrapper->upload_location->value();

    } else{
        $target = drupal_realpath(USER_DRUPAL_DATA_DIR) . "/$collection/$bundle";
    }


    $moved = rename($source, $target);

    if ($moved) {

        // remove collection sub-directory if it is otherwise empty
        module_load_include('php', 'flat_deposit_ui', 'inc/php_functions');
        $collection_directory = drupal_realpath(USER_FREEZE_DIR) . "/$collection/";
        if (is_dir_empty($collection_directory)){drupal_rmdir($collection_directory);}

        // change value of status field
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $node_wrapper->upload_status->set('open');
        $node_wrapper->save();

        //add symbolic link to owncloud user directory
        $oc = new OwnCloud();
        #$oc->CreateCollectionDirectoryAndSync($collection);
        #$oc->CreateProjectSymlinkAndSync(USER_DRUPAL_DATA_DIR , $collection, $bundle);
        $oc->UpdateUserFiles();

        drupal_set_message(t('Bundle ' . $bundle . ' is open and can be changed'));
    }


}



function flat_bundle_browse_node_form_submit($form, &$form_state)
{
    drupal_set_message(t('Do your uploads'));

    $form_state ['redirect'] = 'user/' . $GLOBALS['user']->uid . '/imce';


}


/**
 * Triggers a service that ingests specified bundles into the archive
 *
 * @param $form
 * @param $form_state
 *
 */
function flat_bundle_archive_node_form_submit($form, &$form_state){

    $node = $form_state['node'];

    // create array containing data needed by the ingest service
    $data_to_post = array();
    $data_to_post['drupal_path'] = DRUPAL_ROOT;
    $data_to_post['nid'] = $node->nid;

    // background service http request settings
    $options = array(
        'method' => 'POST',
        'data' => $data_to_post,
        'blocking' => FALSE,
        'headers' => array(
            // Set the Host header to self.
            'Host' => $_SERVER['HTTP_HOST'],),
    );

    $url = httprl_build_url_self(drupal_get_path('module', 'flat_deposit_ui') . "/Helpers/Ingest_service.php");


    // normal mode
    if ($form_state['values']['op'] == "Archive") {
        httprl_request($url, $options);

        // Execute request.
        httprl_send_request();
    }

    // Debug mode
    if ($form_state['values']['op'] == "Archive (Debug)") {

        $url_debug = str_replace($_SERVER['SERVER_ADDR'], "localhost", $url);

        $ch = curl_init();
        curl_setopt_array($ch, array(

            CURLOPT_URL => $url_debug,
            CURLOPT_COOKIE => "XDEBUG_SESSION=PHPSTORM",
            CURLOPT_POST => sizeof($data_to_post),
            CURLOPT_POSTFIELDS => $data_to_post));

        $result = curl_exec($ch);

        if($errno = curl_errno($ch)) {
            $error_message = curl_strerror($errno);
            echo "cURL error ({$errno}):\n {$error_message}";
        }
        curl_close($ch);
    }

    $form_state['redirect'] = 'bundle/'. $GLOBALS['user']->uid;
    drupal_set_message('Frozen bundle is being archived');



}


/**
 *
 */
function flat_deposit_ui_external_location_error($location)
{
// Check if external location is accessible by drupal


    $a = module_load_include('inc', 'flat_deposit_ui', 'inc/config');
    $config = get_configuration_ingest_service();

    if (!is_writable($config['alternate_dir'])){
        $message =  sprintf('External root directory %s  does not exist or is not writable. Please contact administrator',$config["alternate_dir"]);
        return $message;
    };

    $alternate_full_path = $config['alternate_dir'] . USER . $config['alternate_subdir'] . "/" . $location;

    if (!is_writable($alternate_full_path)){
        $message = sprintf('External user directory %s does not exist or is not writable.',$alternate_full_path);
        return $message;
    };

    return FALSE;
}


// Is called when no other node_form_submit is defined
function flat_bundle_creatmd_node_form_submit($form, &$form_state){

    $node = $form_state['node'];
    $form_state['redirect']= "node/$node->nid/cmdi_select/createandfreeze";
    //drupal_set_message("done");

}
